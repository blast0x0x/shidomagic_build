{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","components/Select/Select.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","chainId","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","removed","infoAddress","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","ml","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","isTokenStake","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","usdcPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","Page","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","target","sort","b","exact","renderContent","Loading","DropDownHeader","inputSecondary","DropDownListContainer","zIndices","dropdown","DropDownContainer","Box","isOpen","boxShadow","DropDownList","ul","ListItem","li","dropdownRef","setIsOpen","selectedOptionIndex","setSelectedOptionIndex","toggling","handleClickOutside","document","addEventListener","removeEventListener","index","selectedIndex"],"mappings":"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","file":"static/js/25.ab55497a.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'SHIDO' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'SHIDO' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n    {/*  <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal> */}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n  color:black;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceBigNumber = new BigNumber(balance)\r\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n      return balanceBigNumber.toLocaleString()\r\n    }\r\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text mr=\"8px\" color=\"textSubtle\">\r\n          {t('Annual ROI at current rates')}:\r\n        </Text>\r\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\r\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </AnnualRoiContainer>\r\n      </Flex>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n                toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      \r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'MAGIC' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(lpContract, 'approve', [\r\n        masterChefContract.address,\r\n        ethers.constants.MaxUint256,\r\n      ])\r\n      const receipt = await tx.wait()\r\n      return receipt.status\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          MAGIC\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('Pancakeswap', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('MAGIC + Fees')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'MAGIC'\r\n\r\n  return (\r\n    <StyledCard isActive={isPromotedFarm}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n        />\r\n        {!removed && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text>{t('APR')}:</Text>\r\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {farm.apr ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Earn')}:</Text>\r\n          <Text bold>{earnLabel}</Text>\r\n        </Flex>\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n            infoAddress={`https://amm.unilayer.info/pool/${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  pid: number\r\n  lpLabel: string\r\n  lpSymbol: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  multiplier,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <ApyButton\r\n          variant={hideButton ? 'text' : 'text-and-button'}\r\n          pid={pid}\r\n          lpSymbol={lpSymbol}\r\n          lpLabel={lpLabel}\r\n          multiplier={multiplier}\r\n          cakePrice={cakePrice}\r\n          apr={originalValue}\r\n          displayApr={value}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Container>\r\n      {!isDesktop && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of MAGIC rewards each farm receives, as a proportion of the MAGIC produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 MAGIC per block, a 40x farm would receive 40 MAGIC per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          MAGIC\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Heading>{displayBalance}</Heading>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'MAGIC' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n  lpLabel?: string\r\n  displayApr?: string\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  apr,\r\n  multiplier,\r\n  lpSymbol,\r\n  lpLabel,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  displayApr,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={lpSymbol}\r\n      multiplier={multiplier}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Heading>{displayBalance()}</Heading>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANDEXI', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = `https://amm.unilayer.info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        {/* \r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal> \r\n        */}\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isDesktop, isMobile } = useMatchBreakpoints()\r\n\r\n  const isSmallerScreen = !isDesktop\r\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isMobile) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsWithUserData(isArchived)\r\n\r\n  const isTokenStake = (pid: number) => pid === 0 || pid === 9 || pid === 10  || pid === 11 || pid === 12\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid) && !isTokenStake(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid) && !isTokenStake(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.usdcPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.usdcPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n          }\r\n          return farmsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [chosenFarmsMemoized, observerIsSet])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANDEXI', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake LP tokens to earn.')}\r\n        </Heading>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onOptionChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={loadMoreRef} />\r\n        \r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from '@pancakeswap/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\r\n  cursor: pointer;\r\n  width: 100%;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n  user-select: none;\r\n  z-index: 20;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps extends BoxProps {\r\n  options: OptionProps[]\r\n  onOptionChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onOptionChange, ...props }) => {\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(0)\r\n\r\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    setIsOpen(!isOpen)\r\n    event.stopPropagation()\r\n  }\r\n\r\n  const onOptionClicked = (selectedIndex: number) => () => {\r\n    setSelectedOptionIndex(selectedIndex)\r\n    setIsOpen(false)\r\n\r\n    if (onOptionChange) {\r\n      onOptionChange(options[selectedIndex])\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = () => {\r\n      setIsOpen(false)\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} {...props}>\r\n      <DropDownHeader onClick={toggling}>\r\n        <Text>{options[selectedOptionIndex].label}</Text>\r\n      </DropDownHeader>\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option, index) =>\r\n            index !== selectedOptionIndex ? (\r\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n"],"sourceRoot":""}