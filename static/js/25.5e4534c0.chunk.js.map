{"version":3,"sources":["views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/v1/helpers.ts","views/Predictions/components/v1/NothingToClaimModal.tsx","views/Predictions/components/v1/V1ClaimCheck.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/RoundProgress.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","views/Predictions/hooks/useCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/hooks/useOnViewChange.ts","views/Predictions/Positions.tsx","views/Predictions/types.ts","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/Mobile.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx","state/predictions/hooks.ts"],"names":["HistoryTabs","useGetLatestOraclePrice","useState","ethers","BigNumber","from","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","useEffect","a","contract","getChainlinkOracleContract","latestAnswer","response","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollPredictions","useRef","account","useWeb3React","currentEpoch","useGetCurrentEpoch","earliestEpoch","useGetEarliestEpoch","status","useGetPredictionsStatus","current","PredictionStatus","INITIAL","liveCurrentAndRecent","fetchRounds","fetchMarketData","epochRange","range","fetchLedgerData","epochs","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","predictionStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","TRADING_VIEW_COMPONENT_ID","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","ele","document","getElementById","debouncedOnResize","debounce","resizeObserver","ResizeObserver","observe","unobserve","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","callWithGasPrice","useCallWithGasPrice","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","isLoadingHistory","useGetIsFetchingHistory","history","useGetHistory","reduce","accum","betPayout","REWARD_RATE","epoch","calculateClaimableRounds","fetchNodeHistory","handleClick","tx","wait","receipt","markAsCollected","Toast","txHash","transactionHash","console","error","data","message","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","toFixed","fontSize","times","toFormat","rounds","join","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","handleReclaim","MIN_PRICE_USD_DISPLAYED","MIN_PRICE_BNB_DISPLAYED","formatPriceDifference","minPriceDisplayed","unitPrefix","decimals","sign","isNegative","abs","lt","signedPriceToFormat","mul","formatBigNumberToFixed","formatUsdv2","formatBnbv2","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getHasRoundFailed","buffer","closeTimestampMs","closeTimestamp","now","Date","oracleCalled","getMultiplierv2","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getPriceDifference","lockPrice","sub","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","getPrizePoolAmountHistory","PrizePoolHistoryRow","LockPriceHistoryRow","RoundResult","hasFailed","closePrice","HOUSE","gt","getBetPosition","isPositionUp","priceDifference","my","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","refundable","ledger","fetchRefundableStatus","StyledBetResult","textDisabled","Divider","hr","BetResult","result","canClaim","useGetIsClaimable","useTooltip","fee","placement","targetRef","tooltip","tooltipVisible","isWinner","Result","WIN","returned","getHeaderColor","LOSE","CANCELED","handleSuccess","getHeaderText","getHeaderIcon","claimedHash","href","getBscScanLink","getResultColor","toNumber","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","RoundResultHistory","lockBlock","external","closeBlock","StyledBet","attrs","YourResult","HistoricalBet","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","role","scale","Filter","label","StyledHeader","bubblegum","ButtonMenuContainer","Header","activeTab","setActiveTab","historyFilter","useGetHistoryFilter","isFetchingHistory","handleChange","newFilter","setHistoryFilter","switchTab","tabIndex","HistoryFilter","ALL","size","activeIndex","onItemClick","ROUNDS","checked","onChange","COLLECTED","UNCOLLECTED","getV1History","skip","where","request","GRAPH_API_PREDICTION_V1","gql","getAllV1History","reject","getHistoryChunk","betHistory","flatten","values","isFetching","setIsFetching","setHistory","fetchAllHistory","header","rows","hash","totalBets","anchor","createElement","blob","Blob","type","URL","createObjectURL","target","download","body","appendChild","click","removeChild","StyledClaimCheck","ClaimCheck","NothingToClaimModal","onPresentNothingToClaimModal","Loading","RoundsTab","hasBetHistory","hasHistoryLoaded","useGetHasHistoryLoaded","currentHistoryPage","useGetCurrentHistoryPage","V1ClaimCheck","orderBy","map","page","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","summary","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","getPnlSummary","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","roundId","StyledHistory","BetWrapper","SpinnerWrapper","History","results","getFilteredBets","activeTabComponent","PNL","ConnectWalletButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","EnteredTag","whiteSpace","fontWeight","outline","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","HEADER_HEIGHT","getBorderBackground","gradientStopPoint","cardHeader","warning","getTextColorByStatus","StyledCardHeader","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","borderBackground","CalculatingCard","hasEnteredUp","hasEnteredDown","StyledExpiredRoundCard","Card","ExpiredRoundCard","hasClaimedUp","hasClaimedDown","bufferSeconds","useGetBufferSeconds","hasRoundFailed","RoundProgress","lockTimestamp","startMs","endMs","rawProgress","progress","primaryStep","LiveRoundCard","useGetLastOraclePrice","isBull","priceColor","priceAsNumber","parseFloat","useCountUp","start","end","duration","countUp","update","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","dust","parseUnits","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","bnbBalanceAsBn","useMemo","maxBalance","balanceDisplay","formatBigNumber","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","mulUnsafe","formatFixedNumber","minBetAmountBalance","lte","key","getButtonProps","handleEnterPosition","betMethod","inputAmount","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","toUnsafeFloat","isWarning","inputProps","name","min","max","onValueChanged","valueLabel","step","percentShortcut","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","ROUND_BUFFER","positionDisplay","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","getNow","Math","floor","useCountdown","timestamp","secondsRemaining","setSecondsRemaining","isPaused","setIsPaused","isWindowVisible","useIsWindowVisible","pause","useCallback","unpause","setTimeout","prevSecondsRemaining","clearTimeout","SoonRoundCard","intervalSeconds","useGetIntervalSeconds","startTimestamp","countdown","RoundCard","useGetBetByEpoch","formattedBullMultiplier","isZero","formattedBearMultiplier","Token","lg","Title","Text","Price","Interval","Label","shadows","level1","dir","radii","PricePairLabel","display","TimerLabel","unit","currentRoundLockTimestamp","useGetCurrentRoundLockTimestamp","pr","StyledPrevNextNav","default","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","ButtonWrapper","Menu","rel","order","Link","to","useOnNextRound","previousEpoch","usePreviousValue","useOnViewChange","liveSwiperIndex","view","prevView","usePrevious","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","previousRound","find","swiperIndex","indexOf","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","CHART_LOCAL_STORAGE_KEY","Ul","ul","ChartDisclaimer","usePersistState","localStorageKey","doNotShow","setDoNowShow","Predictions","isDesktop","useMatchBreakpoints","hasAcceptedRisk","setHasAcceptedRisk","initialBlock","useInitialBlock","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","JSON","parse","localStorage","getItem","initializePredictions","PageLoader","useGetRounds","useSelector","predictions","keys","parseBigNumberObj","roundData","ledgers","claimableStatuses","earliestRound","minBy","lastOraclePrice","currentRound","useGetCurrentRound","useGetLeaderboardLoadingState","leaderboard","loadingState","useGetLeaderboardResults","useGetLeaderboardFilters","filters","useGetLeaderboardSkip","useGetLeaderboardHasMoreResults","hasMoreResults","useGetAddressResult","addressResults","useGetOrFetchLeaderboardAddressResult","addressResult","address","isAddress","fetchAddressResult"],"mappings":"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","file":"static/js/25.5e4534c0.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowForwardIcon,\r\n  Box,\r\n  Button,\r\n  Radio,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { setHistoryFilter, setHistoryPaneState } from 'state/predictions'\r\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\nconst Filter = styled.label`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  margin-right: 16px;\r\n`\r\n\r\nconst StyledHeader = styled(Box)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  flex: none;\r\n  padding: 16px;\r\n`\r\n\r\nconst ButtonMenuContainer = styled.div`\r\n  margin-bottom: 16px;\r\n  width: 100%;\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  & button {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\ninterface HeaderProps {\r\n  activeTab: HistoryTabs\r\n  setActiveTab: (value: HistoryTabs) => void\r\n}\r\n\r\nexport enum HistoryTabs {\r\n  ROUNDS,\r\n  PNL,\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\r\n  const historyFilter = useGetHistoryFilter()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(false))\r\n  }\r\n\r\n  const handleChange = (newFilter: HistoryFilter) => async () => {\r\n    if (newFilter !== historyFilter) {\r\n      dispatch(setHistoryFilter(newFilter))\r\n    }\r\n  }\r\n\r\n  const switchTab = async (tabIndex: number) => {\r\n    setActiveTab(tabIndex)\r\n    await handleChange(HistoryFilter.ALL)()\r\n  }\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n        <Heading as=\"h3\" size=\"md\">\r\n          {t('History')}\r\n        </Heading>\r\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n      <ButtonMenuContainer>\r\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\r\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </ButtonMenuContainer>\r\n      {activeTab === HistoryTabs.ROUNDS && (\r\n        <>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n            {t('Filter')}\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.ALL}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.ALL)}\r\n              />\r\n              <Text ml=\"4px\">{t('All')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.COLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.COLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Collected')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\r\n            </Filter>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\r\n\r\nconst useGetLatestOraclePrice = () => {\r\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\r\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchPrice = async () => {\r\n      const contract = getChainlinkOracleContract()\r\n      const response = await contract.latestAnswer()\r\n      setPrice(response)\r\n    }\r\n\r\n    fetchPrice()\r\n  }, [lastUpdated, setPrice])\r\n\r\n  return { price, lastUpdated, refresh }\r\n}\r\n\r\nexport default useGetLatestOraclePrice\r\n","import { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLastOraclePrice } from 'state/predictions'\r\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\r\n\r\nconst usePollOraclePrice = (seconds = 10) => {\r\n  const { price, refresh } = useGetLatestOraclePrice()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Poll for the oracle price\r\n  useEffect(() => {\r\n    refresh()\r\n    const timer = setInterval(() => {\r\n      refresh()\r\n    }, seconds * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [seconds, refresh])\r\n\r\n  // If the price changed update global state\r\n  useEffect(() => {\r\n    dispatch(setLastOraclePrice(price.toJSON()))\r\n  }, [price, dispatch])\r\n}\r\n\r\nexport default usePollOraclePrice\r\n","import { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\r\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { range } from 'lodash'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollPredictions = () => {\r\n  const timer = useRef<NodeJS.Timeout>(null)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const earliestEpoch = useGetEarliestEpoch()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  useEffect(() => {\r\n    // Clear old timer\r\n    if (timer.current) {\r\n      clearInterval(timer.current)\r\n    }\r\n\r\n    if (status !== PredictionStatus.INITIAL) {\r\n      timer.current = setInterval(async () => {\r\n        const liveCurrentAndRecent = [currentEpoch, currentEpoch - 1, currentEpoch - 2]\r\n\r\n        dispatch(fetchRounds(liveCurrentAndRecent))\r\n        dispatch(fetchMarketData())\r\n\r\n        if (account) {\r\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\r\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\r\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\r\n        }\r\n      }, POLL_TIME_IN_SECONDS * 1000)\r\n    }\r\n\r\n    return () => {\r\n      if (timer.current) {\r\n        clearInterval(timer.current)\r\n      }\r\n    }\r\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\r\n}\r\n\r\nexport default usePollPredictions\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\r\n  height: calc(100vh - 64px);\r\n  min-height: calc(100vh - 64px);\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nexport default Container\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory } from 'state/predictions/helpers'\r\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\n\r\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\r\nconst bounceInKeyframe = keyframes`\r\n  from,\r\n  60%,\r\n  75%,\r\n  90%,\r\n  to {\r\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(0, 3000px, 0) scaleY(5);\r\n  }\r\n\r\n  60% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\r\n  }\r\n\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`\r\n\r\nconst bounceOutKeyframe = keyframes`\r\n  20% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\r\n  }\r\n\r\n  40%,\r\n  45% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translate3d(0, 2000px, 0) scaleY(3);\r\n  }\r\n`\r\n\r\nconst bounceInAnimation = css`\r\n  animation: ${bounceInKeyframe} 1s;\r\n`\r\n\r\nconst bounceOutAnimation = css`\r\n  animation: ${bounceOutKeyframe} 1s;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  bottom: 72px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  &.popup-enter-active {\r\n    ${bounceInAnimation}\r\n  }\r\n\r\n  &.popup-enter-done {\r\n    bottom: 72px;\r\n  }\r\n\r\n  &.popup-exit-done {\r\n    bottom: -2000px;\r\n  }\r\n\r\n  &.popup-exit-active {\r\n    ${bounceOutAnimation}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    bottom: 16px;\r\n    justify-content: flex-end;\r\n\r\n    &.popup-enter-done {\r\n      bottom: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Popup = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 32px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  max-width: 320px;\r\n  padding: 16px 8px;\r\n`\r\n\r\nconst CollectWinningsPopup = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const ref = useRef(null)\r\n  const timer = useRef(null)\r\n  const { account } = useWeb3React()\r\n  const predictionStatus = useGetPredictionsStatus()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(false)\r\n    clearInterval(timer.current)\r\n  }\r\n\r\n  // Check user's history for unclaimed winners\r\n  useEffect(() => {\r\n    let isCancelled = false\r\n    if (account) {\r\n      timer.current = setInterval(async () => {\r\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\r\n\r\n        if (!isCancelled) {\r\n          // Filter out bets that were not winners\r\n          const winnerBets = bets.filter((bet) => {\r\n            return bet.position === bet.round.position\r\n          })\r\n\r\n          if (!isHistoryPaneOpen) {\r\n            setIsOpen(winnerBets.length > 0)\r\n          }\r\n        }\r\n      }, 30000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n      isCancelled = true\r\n    }\r\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\r\n\r\n  // Any time the history pane is open make sure the popup closes\r\n  useEffect(() => {\r\n    if (isHistoryPaneOpen) {\r\n      setIsOpen(false)\r\n    }\r\n  }, [isHistoryPaneOpen, setIsOpen])\r\n\r\n  return (\r\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\r\n      <Wrapper ref={ref}>\r\n        <Popup>\r\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\r\n            {t('Collect Winnings')}\r\n          </Button>\r\n          <IconButton variant=\"text\" onClick={handleClick}>\r\n            <CloseIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n        </Popup>\r\n      </Wrapper>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsPopup\r\n","import React, { createContext, Dispatch, useState } from 'react'\r\nimport SwiperCore from 'swiper'\r\n\r\ninterface Context {\r\n  swiper: SwiperCore\r\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\r\n  destroySwiper: () => void\r\n}\r\n\r\nexport const SwiperContext = createContext<Context>(undefined)\r\n\r\nconst SwiperProvider = ({ children }) => {\r\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\r\n\r\n  const destroySwiper = () => {\r\n    if (swiper) {\r\n      swiper.destroy()\r\n      setSwiper(null)\r\n    }\r\n  }\r\n\r\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\r\n}\r\n\r\nexport default SwiperProvider\r\n","import React, { useEffect } from 'react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { DefaultTheme, useTheme } from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\n\r\nconst TRADING_VIEW_COMPONENT_ID = 'tradingview_b239c'\r\n\r\n/**\r\n * When the script tag is injected the TradingView object is not immediately\r\n * available on the window. So we listen for when it gets set\r\n */\r\nconst tradingViewListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'TradingView', {\r\n      configurable: true,\r\n      set(value) {\r\n        this.tv = value\r\n        resolve(value)\r\n      },\r\n    }),\r\n  )\r\n\r\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\r\n  /* eslint-disable new-cap */\r\n  /* eslint-disable no-new */\r\n  // @ts-ignore\r\n  new TradingViewObj.widget({\r\n    autosize: true,\r\n    height: '100%',\r\n    symbol: 'BINANCE:BNBUSDC',\r\n    interval: '5',\r\n    timezone: 'Etc/UTC',\r\n    theme: theme.isDark ? 'dark' : 'light',\r\n    style: '1',\r\n    locale: localeCode,\r\n    toolbar_bg: '#f1f3f6',\r\n    enable_publishing: false,\r\n    allow_symbol_change: true,\r\n    container_id: TRADING_VIEW_COMPONENT_ID,\r\n  })\r\n}\r\n\r\nconst TradingView = () => {\r\n  const { currentLanguage } = useTranslation()\r\n  const theme = useTheme()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const ele = document.getElementById(TRADING_VIEW_COMPONENT_ID)\r\n\r\n    const debouncedOnResize = debounce(() => {\r\n      setLastUpdated()\r\n    }, 500)\r\n\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      debouncedOnResize()\r\n    })\r\n\r\n    resizeObserver.observe(ele)\r\n\r\n    return () => {\r\n      resizeObserver.unobserve(ele)\r\n    }\r\n  }, [setLastUpdated])\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    if (window.tv) {\r\n      // @ts-ignore\r\n      initializeTradingView(window.tv, theme, currentLanguage.code)\r\n    } else {\r\n      tradingViewListener().then((tv) => {\r\n        initializeTradingView(tv, theme, currentLanguage.code)\r\n      })\r\n    }\r\n  }, [theme, currentLanguage, lastUpdated])\r\n\r\n  return (\r\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\r\n      <div id={TRADING_VIEW_COMPONENT_ID} />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default TradingView\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface NotificationProps {\r\n  title: string\r\n}\r\n\r\n// const BunnyDecoration = styled.div`\r\n//   position: absolute;\r\n//   top: -130px; // line up bunny at the top of the modal\r\n//   left: 0px;\r\n//   text-align: center;\r\n//   width: 100%;\r\n// `\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  justify-content: center;\r\n`\r\n\r\nconst CardWrapper = styled.div`\r\n  position: relative;\r\n  width: 320px;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -130px;\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n  z-index: 5;\r\n`\r\n\r\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <CardWrapper>\r\n        <BunnyDecoration>\r\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\r\n        </BunnyDecoration>\r\n        <Card>\r\n          <CardBody>\r\n            <Heading mb=\"24px\">{title}</Heading>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </CardWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport { Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst ErrorNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n  return (\r\n    <Notification title={t('Error')}>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\r\n      </Text>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default ErrorNotification\r\n","import React from 'react'\r\nimport { Box, Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst PauseNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <Notification title={t('Markets Paused')}>\r\n      <Box mb=\"24px\">\r\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\r\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\r\n        <Text as=\"p\">\r\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\r\n        </Text>\r\n      </Box>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default PauseNotification\r\n","import { Bet, BetPosition } from 'state/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\n\r\nexport const formatUsd = (usd: number) => {\r\n  return `$${formatNumber(usd || 0, 3, 3)}`\r\n}\r\n\r\nexport const formatBnb = (bnb: number) => {\r\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\r\n}\r\n\r\nexport const getMultiplier = (total: number, amount: number) => {\r\n  if (total === 0 || amount === 0) {\r\n    return 0\r\n  }\r\n\r\n  return total / amount\r\n}\r\n\r\n/**\r\n * Calculates the total payout given a bet\r\n */\r\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const { bullAmount, bearAmount, totalAmount } = bet.round\r\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return bet.amount * multiplier * rewardRate\r\n}\r\n\r\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const payout = getPayout(bet, rewardRate)\r\n  return payout - bet.amount\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Button,\r\n  AutoRenewIcon,\r\n  TrophyGoldIcon,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  ModalCloseButton,\r\n  Skeleton,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { fetchNodeHistory, markAsCollected } from 'state/predictions'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useGetHistory, useGetIsFetchingHistory } from 'state/predictions/hooks'\r\nimport { getPayout } from './History/helpers'\r\n\r\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\ninterface ClaimableRounds {\r\n  epochs: number[]\r\n  total: number\r\n}\r\n\r\nconst calculateClaimableRounds = (history): ClaimableRounds => {\r\n  if (!history) {\r\n    return { epochs: [], total: 0 }\r\n  }\r\n\r\n  return history.reduce(\r\n    (accum: ClaimableRounds, bet: Bet) => {\r\n      if (!bet.claimed && bet.position === bet.round.position) {\r\n        const betPayout = getPayout(bet, REWARD_RATE)\r\n        return {\r\n          ...accum,\r\n          epochs: [...accum.epochs, bet.round.epoch],\r\n          total: accum.total + betPayout,\r\n        }\r\n      }\r\n\r\n      return accum\r\n    },\r\n    { epochs: [], total: 0 },\r\n  )\r\n}\r\n\r\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({ onDismiss, onSuccess }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const predictionsContract = usePredictionsContract()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const dispatch = useAppDispatch()\r\n  const isLoadingHistory = useGetIsFetchingHistory()\r\n  const history = useGetHistory()\r\n\r\n  const { epochs, total } = calculateClaimableRounds(history)\r\n\r\n  useEffect(() => {\r\n    // Fetch history if they have not opened the history pane yet\r\n    if (history.length === 0) {\r\n      dispatch(fetchNodeHistory({ account }))\r\n    }\r\n  }, [account, history, dispatch])\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(predictionsContract, 'claim', [epochs])\r\n      setIsPendingTx(true)\r\n      const receipt = await tx.wait()\r\n\r\n      // Immediately mark rounds as claimed\r\n      dispatch(\r\n        markAsCollected(\r\n          epochs.reduce((accum, epoch) => {\r\n            return { ...accum, [epoch]: true }\r\n          }, {}),\r\n        ),\r\n      )\r\n\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n\r\n      onDismiss()\r\n      setIsPendingTx(false)\r\n      toastSuccess(\r\n        t('Winnings collected!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n          {t('Your prizes have been sent to your wallet')}\r\n        </ToastDescriptionWithTx>,\r\n      )\r\n    } catch (error) {\r\n      console.error('Unable to claim winnings', error)\r\n      toastError(\r\n        t('Error'),\r\n        error?.data?.message || t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n      )\r\n    } finally {\r\n      setIsPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Collecting')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${total.toFixed(4)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(total).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"center\" mb=\"24px\">\r\n          {isLoadingHistory ? (\r\n            <Skeleton height=\"21\" width=\"140px\" />\r\n          ) : (\r\n            <Text color=\"textSubtle\" fontSize=\"14px\">\r\n              {epochs.length === 1\r\n                ? t('From round %round%', { round: epochs[0] })\r\n                : t('From rounds %rounds%', { rounds: epochs.join(', ') })}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={handleClick}\r\n          isLoading={isPendingTx || isLoadingHistory}\r\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React from 'react'\r\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\r\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\r\n\r\ninterface CollectWinningsButtonProps extends ButtonProps {\r\n  hasClaimed: boolean\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({ hasClaimed, onSuccess, children, ...props }) => {\r\n  const [onPresentCollectWinningsModal] = useModal(<CollectRoundWinningsModal onSuccess={onSuccess} />, false)\r\n\r\n  return (\r\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsButton\r\n","import React, { ReactNode, useState } from 'react'\r\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ninterface ReclaimPositionButtonProps extends ButtonProps {\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n  children?: ReactNode\r\n}\r\n\r\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const predictionsContract = usePredictionsContract()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleReclaim = async () => {\r\n    const tx = await callWithGasPrice(predictionsContract, 'claim', [[epoch]])\r\n    setIsPendingTx(true)\r\n\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n      setIsPendingTx(false)\r\n      toastSuccess(t('Position reclaimed!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n    } else {\r\n      setIsPendingTx(false)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleReclaim}\r\n      isLoading={isPendingTx}\r\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\r\n      {...props}\r\n    >\r\n      {children || t('Reclaim Position')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ReclaimPositionButton\r\n","import { BigNumber, ethers } from 'ethers'\r\nimport { NodeRound } from 'state/types'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\n\r\nconst MIN_PRICE_USD_DISPLAYED = BigNumber.from(100000)\r\nconst MIN_PRICE_BNB_DISPLAYED = BigNumber.from('1000000000000000')\r\nconst DISPLAYED_DECIMALS = 3\r\n\r\ntype formatPriceDifferenceProps = {\r\n  price?: BigNumber\r\n  minPriceDisplayed: BigNumber\r\n  unitPrefix: string\r\n  decimals: number\r\n}\r\n\r\nconst formatPriceDifference = ({\r\n  price = BigNumber.from(0),\r\n  minPriceDisplayed,\r\n  unitPrefix,\r\n  decimals,\r\n}: formatPriceDifferenceProps) => {\r\n  const sign = price.isNegative() ? BigNumber.from(-1) : BigNumber.from(1)\r\n\r\n  if (price.abs().lt(minPriceDisplayed)) {\r\n    const signedPriceToFormat = minPriceDisplayed.mul(sign)\r\n    return `<${unitPrefix}${formatBigNumberToFixed(signedPriceToFormat, DISPLAYED_DECIMALS, decimals)}`\r\n  }\r\n\r\n  return `${unitPrefix}${formatBigNumberToFixed(price, DISPLAYED_DECIMALS, decimals)}`\r\n}\r\n\r\nexport const formatUsdv2 = (usd: BigNumber) => {\r\n  return formatPriceDifference({ price: usd, minPriceDisplayed: MIN_PRICE_USD_DISPLAYED, unitPrefix: '$', decimals: 8 })\r\n}\r\n\r\nexport const formatBnbv2 = (bnb: BigNumber) => {\r\n  return formatPriceDifference({ price: bnb, minPriceDisplayed: MIN_PRICE_BNB_DISPLAYED, unitPrefix: '', decimals: 18 })\r\n}\r\n\r\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\r\n\r\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\r\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\r\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\r\n\r\n  if (hours > 0) {\r\n    return `${padTime(hours)}:${minutesSeconds}`\r\n  }\r\n\r\n  return minutesSeconds\r\n}\r\n\r\nexport const getHasRoundFailed = (round: NodeRound, buffer: number) => {\r\n  const closeTimestampMs = (round.closeTimestamp + buffer) * 1000\r\n  const now = Date.now()\r\n\r\n  if (closeTimestampMs !== null && now > closeTimestampMs && !round.oracleCalled) {\r\n    return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport const getMultiplierv2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\r\n  if (!total) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  if (total.eq(0) || amount.eq(0)) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\r\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\r\n\r\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\r\n}\r\n\r\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!price || !lockPrice) {\r\n    return ethers.BigNumber.from(0)\r\n  }\r\n\r\n  return price.sub(lockPrice)\r\n}\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition } from 'state/types'\r\n\r\ninterface TagProps extends FlexProps {\r\n  bg?: string\r\n  startIcon?: ReactNode\r\n}\r\n\r\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\r\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\r\n  display: inline-flex;\r\n`\r\n\r\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\r\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\r\n\r\n  return (\r\n    <StyledTag\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"4px\"\r\n      bg={bg}\r\n      py=\"4px\"\r\n      px=\"8px\"\r\n      onClick={onClick}\r\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\r\n      {...props}\r\n    >\r\n      {icon}\r\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\r\n        {children}\r\n      </Text>\r\n    </StyledTag>\r\n  )\r\n}\r\n\r\ninterface PositionTagProps extends FlexProps {\r\n  betPosition: BetPosition\r\n}\r\n\r\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\r\n  const isUpPosition = betPosition === BetPosition.BULL\r\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\r\n\r\n  return (\r\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\r\n      {children}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default PositionTag\r\n","import React from 'react'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition, NodeRound, Round } from 'state/types'\r\nimport { formatUsdv2, formatBnbv2 } from '../../helpers'\r\nimport { formatBnb, formatUsd } from '../History/helpers'\r\n\r\n// PrizePoolRow\r\ninterface PrizePoolRowProps extends FlexProps {\r\n  totalAmount: NodeRound['totalAmount']\r\n}\r\n\r\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnbv2(totalAmount)\r\n}\r\n\r\nconst Row = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// Payout Row\r\ninterface PayoutRowProps extends FlexProps {\r\n  positionLabel: string\r\n  multiplier: number\r\n  amount: number\r\n}\r\n\r\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\r\n\r\n  return (\r\n    <Row height=\"18px\" {...props}>\r\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\r\n        {positionLabel}:\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\r\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\r\n        </Text>\r\n        <Text mx=\"4px\">|</Text>\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\r\n      </Flex>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceRowProps extends FlexProps {\r\n  lockPrice: NodeRound['lockPrice']\r\n}\r\n\r\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// RoundResultBox\r\ninterface RoundResultBoxProps {\r\n  betPosition?: BetPosition\r\n  isNext?: boolean\r\n  isLive?: boolean\r\n  hasEntered?: boolean\r\n}\r\n\r\nconst getBackgroundColor = ({\r\n  theme,\r\n  betPosition,\r\n  isNext,\r\n  isLive,\r\n  hasEntered,\r\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\r\n  if (isNext) {\r\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\r\n  }\r\n\r\n  if (hasEntered || isLive) {\r\n    return theme.colors.secondary\r\n  }\r\n\r\n  if (betPosition === BetPosition.BULL) {\r\n    return theme.colors.success\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return theme.colors.failure\r\n  }\r\n\r\n  return theme.colors.cardBorder\r\n}\r\n\r\nconst Background = styled(Box)<RoundResultBoxProps>`\r\n  background: ${getBackgroundColor};\r\n  border-radius: 16px;\r\n  padding: 2px;\r\n`\r\n\r\nconst StyledRoundResultBox = styled.div`\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 14px;\r\n  padding: 16px;\r\n`\r\n\r\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\r\n  isNext = false,\r\n  hasEntered = false,\r\n  isLive = false,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\r\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\r\n    </Background>\r\n  )\r\n}\r\n\r\n/**\r\n * TODO: Remove\r\n *\r\n * This is a temporary function until we consolidate the data coming from the graph versus the node\r\n */\r\ninterface PrizePoolHistoryRowProps extends FlexProps {\r\n  totalAmount: number\r\n}\r\n\r\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnb(totalAmount)\r\n}\r\n\r\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceHistoryRowProps extends FlexProps {\r\n  lockPrice: Round['lockPrice']\r\n}\r\n\r\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n/**\r\n * END TEMPORARY COMPONENTS\r\n */\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: NodeRound\r\n  hasFailed?: boolean\r\n}\r\n\r\nconst getBetPosition = (closePrice: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!closePrice) {\r\n    return null\r\n  }\r\n\r\n  if (closePrice.eq(lockPrice)) {\r\n    return BetPosition.HOUSE\r\n  }\r\n\r\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = getBetPosition(closePrice, lockPrice)\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {hasFailed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {closePrice ? (\r\n            <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n              {formatUsdv2(closePrice)}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton height=\"34px\" my=\"1px\" />\r\n          )}\r\n          <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n      <PrizePoolRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import React from 'react'\r\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsd } from '../History/helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = closePrice - lockPrice\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {round.failed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n            {formatUsd(closePrice)}\r\n          </Text>\r\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\r\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const predictionsContract = getPredictionsContract()\r\n      const refundable = await predictionsContract.refundable(epoch, account)\r\n\r\n      if (refundable) {\r\n        // Double check they have not already claimed\r\n        const ledger = await predictionsContract.ledger(epoch, account)\r\n        setIsRefundable(ledger.claimed === false)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { fetchLedgerData, markAsCollected } from 'state/predictions'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { useGetIsClaimable } from 'state/predictions/hooks'\r\nimport { getBscScanLink } from 'utils'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport PositionTag from '../PositionTag'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\n\r\ninterface BetResultProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetResult = styled(Box)`\r\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  border-radius: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n`\r\n\r\nconst Divider = styled.hr`\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\r\n  const canClaim = useGetIsClaimable(bet.round.epoch)\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  const isWinner = result === Result.WIN\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = isWinner ? getNetPayout(bet, REWARD_RATE) : bet.amount\r\n  const returned = payout + bet.amount\r\n\r\n  const getHeaderColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'warning'\r\n      case Result.LOSE:\r\n        return 'textSubtle'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getHeaderText = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return t('Win')\r\n      case Result.LOSE:\r\n        return t('Lose')\r\n      case Result.CANCELED:\r\n        return t('Canceled')\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n\r\n  const getHeaderIcon = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return <PrizeIcon color={getHeaderColor()} />\r\n      case Result.LOSE:\r\n      case Result.CANCELED:\r\n        return <BlockIcon color={getHeaderColor()} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const getResultColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markAsCollected({ [bet.round.epoch]: true }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Heading>{t('Your History')}</Heading>\r\n        <Flex alignItems=\"center\">\r\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\r\n            {getHeaderText()}\r\n          </Heading>\r\n          {getHeaderIcon()}\r\n        </Flex>\r\n      </Flex>\r\n      <StyledBetResult>\r\n        {result === Result.WIN && !canClaim && (\r\n          <CollectWinningsButton hasClaimed={!canClaim} width=\"100%\" mb=\"16px\" onSuccess={handleSuccess}>\r\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {bet.claimed && bet.claimedHash && (\r\n          <Flex justifyContent=\"center\">\r\n            <LinkExternal href={getBscScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\r\n              {t('View on Shidoscan')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {result === Result.CANCELED && isRefundable && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\r\n        )}\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your direction')}:</Text>\r\n          <PositionTag betPosition={bet.position}>\r\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        {isWinner && (\r\n          <>\r\n            <Divider />\r\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('Amount to collect')}:\r\n              </Text>\r\n              <Flex justifyContent=\"end\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\r\n                <span ref={targetRef}>\r\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\r\n                </span>\r\n              </Flex>\r\n              {tooltipVisible && tooltip}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </StyledBetResult>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BetResult\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\r\nimport BetResult from './BetResult'\r\nimport { getMultiplier } from './helpers'\r\n\r\ninterface BetDetailsProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetDetails = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 24px;\r\n`\r\n\r\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const { totalAmount, bullAmount, bearAmount } = bet.round\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  return (\r\n    <StyledBetDetails>\r\n      {result === Result.CANCELED && (\r\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n          {t(\r\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\r\n          )}\r\n        </Text>\r\n      )}\r\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\r\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\r\n      <RoundResultHistory round={bet.round} mb=\"24px\">\r\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\r\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\r\n      </RoundResultHistory>\r\n      {bet.round.lockBlock && (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Opening Block')}</Text>\r\n          <Link href={getBscScanLink(bet.round.lockBlock, 'block')} external>\r\n            {bet.round.lockBlock}\r\n          </Link>\r\n        </Flex>\r\n      )}\r\n      {bet.round.closeBlock && (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Text>{t('Closing Block')}</Text>\r\n          <Link href={getBscScanLink(bet.round.closeBlock, 'block')} external>\r\n            {bet.round.closeBlock}\r\n          </Link>\r\n        </Flex>\r\n      )}\r\n    </StyledBetDetails>\r\n  )\r\n}\r\n\r\nexport default BetDetails\r\n","import React, { useState } from 'react'\r\nimport {\r\n  Box,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n  Flex,\r\n  IconButton,\r\n  PlayCircleOutlineIcon,\r\n  Text,\r\n  WaitIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { Bet, PredictionStatus } from 'state/types'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { useGetCurrentEpoch, useGetIsClaimable, useGetPredictionsStatus } from 'state/predictions/hooks'\r\nimport { fetchLedgerData, markAsCollected } from 'state/predictions'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport BetDetails from './BetDetails'\r\n\r\ninterface BetProps {\r\n  bet: Bet\r\n}\r\n\r\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  cursor: pointer;\r\n`\r\n\r\nconst YourResult = styled(Box)`\r\n  flex: 1;\r\n`\r\n\r\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { amount, round } = bet\r\n\r\n  const { t } = useTranslation()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const status = useGetPredictionsStatus()\r\n  const canClaim = useGetIsClaimable(bet.round.epoch)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  const getRoundColor = (result) => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getRoundPrefix = (result) => {\r\n    if (result === Result.LOSE) {\r\n      return '-'\r\n    }\r\n\r\n    if (result === Result.WIN) {\r\n      return '+'\r\n    }\r\n\r\n    return ''\r\n  }\r\n\r\n  const roundResult = getRoundResult(bet, currentEpoch)\r\n  const resultTextColor = getRoundColor(roundResult)\r\n  const resultTextPrefix = getRoundPrefix(roundResult)\r\n  const isOpenRound = round.epoch === currentEpoch\r\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, REWARD_RATE) : amount\r\n\r\n  const renderBetLabel = () => {\r\n    if (isOpenRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"primary\" bold>\r\n            {t('Starting Soon')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    if (isLiveRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"secondary\" bold>\r\n            {t('Live Now')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Your Result')}\r\n        </Text>\r\n        <Text bold color={resultTextColor} lineHeight={1}>\r\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markAsCollected({ [bet.round.epoch]: true }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledBet onClick={toggleOpen} role=\"button\">\r\n        <Box width=\"48px\">\r\n          <Text textAlign=\"center\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {t('Round')}\r\n            </Text>\r\n            <Text bold lineHeight={1}>\r\n              {round.epoch.toLocaleString()}\r\n            </Text>\r\n          </Text>\r\n        </Box>\r\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\r\n        {roundResult === Result.WIN && canClaim && (\r\n          <CollectWinningsButton hasClaimed={!canClaim} onSuccess={handleSuccess} scale=\"sm\" mr=\"8px\">\r\n            {t('Collect')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {roundResult === Result.CANCELED && canClaim && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\r\n            {t('Reclaim')}\r\n          </ReclaimPositionButton>\r\n        )}\r\n        {!isOpenRound && !isLiveRound && (\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n          </IconButton>\r\n        )}\r\n      </StyledBet>\r\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HistoricalBet\r\n","import request, { gql } from 'graphql-request'\r\nimport flatten from 'lodash/flatten'\r\nimport { GRAPH_API_PREDICTION_V1 } from 'config/constants/endpoints'\r\n\r\nexport const getV1History = async (skip = 0, where = {}): Promise<Record<string, any>[]> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION_V1,\r\n    gql`\r\n      query getV1BetHistory($skip: Int!, $where: Bet_filter) {\r\n        bets(first: 1000, skip: $skip, where: $where, orderBy: createdAt, orderDirection: desc) {\r\n          hash\r\n          amount\r\n          position\r\n          claimed\r\n          claimedAmount\r\n          claimedHash\r\n          round {\r\n            epoch\r\n            position\r\n            failed\r\n            totalAmount\r\n            lockPrice\r\n            closePrice\r\n            totalBets\r\n            totalAmount\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    { skip, where },\r\n  )\r\n  return response.bets\r\n}\r\n\r\nexport const getAllV1History = (where = {}): Promise<Record<string, any>[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    const bets = {}\r\n\r\n    const getHistoryChunk = async (skip: number) => {\r\n      try {\r\n        const betHistory = await getV1History(skip, where)\r\n        bets[skip] = betHistory\r\n\r\n        if (betHistory.length === 0) {\r\n          resolve(flatten(Object.values(bets)))\r\n        } else {\r\n          getHistoryChunk(skip + 1000)\r\n        }\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    }\r\n\r\n    getHistoryChunk(0)\r\n  })\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Text,\r\n  Heading,\r\n  ModalCloseButton,\r\n  Button,\r\n  AutoRenewIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getAllV1History } from './helpers'\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst CollectRoundWinningsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const [history, setHistory] = useState([])\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    const header = [\r\n      'Round',\r\n      'Result',\r\n      'Your Position',\r\n      'Bet Amount',\r\n      'Transaction',\r\n      'Claimed Transaction',\r\n      'Lock Price',\r\n      'Close Price',\r\n      'Total Bets',\r\n      'Total Amount',\r\n      'Round Failed',\r\n    ].join(',')\r\n\r\n    const rows = history.reduce((accum, bet) => {\r\n      return [\r\n        ...accum,\r\n        [\r\n          bet.round.epoch,\r\n          bet.round.position,\r\n          bet.position,\r\n          bet.amount,\r\n          bet.hash,\r\n          bet.claimedHash || '',\r\n          bet.round.lockPrice,\r\n          bet.round.closePrice,\r\n          bet.round.totalBets,\r\n          bet.round.totalAmount,\r\n          bet.round.failed,\r\n        ].join(','),\r\n      ]\r\n    }, [])\r\n\r\n    const anchor = document.createElement('a')\r\n    const blob = new Blob([`${header}\\n${rows.join('\\n')}`], {\r\n      type: 'text/csv;charset=utf-8;',\r\n    })\r\n\r\n    anchor.href = URL.createObjectURL(blob)\r\n    anchor.target = '_blank'\r\n    anchor.download = 'pancakeswap-prediction-v1-history.csv'\r\n\r\n    document.body.appendChild(anchor)\r\n    anchor.click()\r\n    document.body.removeChild(anchor)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchAllHistory = async () => {\r\n      setIsFetching(true)\r\n\r\n      try {\r\n        const response = await getAllV1History({ user: account.toLowerCase() })\r\n        setHistory(response)\r\n      } catch (error) {\r\n        console.error('Unable to fetch history', error)\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllHistory()\r\n    }\r\n  }, [account, setHistory, setIsFetching])\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Nothing to Collect')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <Text as=\"p\" fontSize=\"14px\">\r\n          {t('You have no unclaimed v0.1 prizes.')}\r\n        </Text>\r\n        <Text as=\"p\" fontSize=\"14px\" mb=\"24px\">\r\n          {t('Download your v0.1 Prediction history below.')}\r\n        </Text>\r\n        <Button\r\n          onClick={handleClick}\r\n          isLoading={isFetching}\r\n          endIcon={isFetching ? <AutoRenewIcon spin width=\"24px\" color=\"white\" /> : null}\r\n        >\r\n          {t('Download .CSV')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Box, Flex, Text, ChevronRightIcon, useModal } from '@pancakeswap/uikit'\r\nimport Loading from 'components/Loading'\r\nimport CollectRoundWinningsModal from '../CollectRoundWinningsModal'\r\nimport { getAllV1History } from './helpers'\r\nimport NothingToClaimModal from './NothingToClaimModal'\r\n\r\nconst StyledClaimCheck = styled(Flex)`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  cursor: pointer;\r\n  justify-content: space-between;\r\n  padding: 16px;\r\n`\r\n\r\nconst ClaimCheck = () => {\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const [onPresentCollectWinningsModal] = useModal(<CollectRoundWinningsModal />, false)\r\n\r\n  const [onPresentNothingToClaimModal] = useModal(<NothingToClaimModal />)\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      setIsFetching(true)\r\n      const betHistory = await getAllV1History({ user: account.toLowerCase(), claimed: false })\r\n\r\n      // Filter out bets that can be claimed\r\n      const unclaimedBets = betHistory.filter((bet) => {\r\n        return bet.round.position === bet.position || bet.round.failed === true\r\n      })\r\n\r\n      if (unclaimedBets.length > 0) {\r\n        onPresentCollectWinningsModal()\r\n      } else {\r\n        onPresentNothingToClaimModal()\r\n      }\r\n    } catch (error) {\r\n      console.error('Unable to check v1 history', error)\r\n    } finally {\r\n      setIsFetching(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledClaimCheck onClick={account ? handleClick : undefined}>\r\n      <Box style={{ flex: 1 }}>\r\n        <Text>{t('Showing history for Prediction v0.2')}</Text>\r\n        <Flex alignItems=\"center\">\r\n          <Text color=\"primary\">{t('Check for unclaimed v0.1 winnings')}</Text>\r\n          <ChevronRightIcon color=\"primary\" width=\"24px\" />\r\n        </Flex>\r\n      </Box>\r\n      {isFetching && (\r\n        <Box px=\"16px\">\r\n          <Loading />\r\n        </Box>\r\n      )}\r\n    </StyledClaimCheck>\r\n  )\r\n}\r\n\r\nexport default ClaimCheck\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { orderBy } from 'lodash'\r\nimport { Box, Button, Flex, Heading, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { Bet } from 'state/types'\r\nimport { fetchNodeHistory } from 'state/predictions'\r\nimport { useGetCurrentHistoryPage, useGetHasHistoryLoaded, useGetIsFetchingHistory } from 'state/predictions/hooks'\r\nimport HistoricalBet from './HistoricalBet'\r\nimport V1ClaimCheck from '../v1/V1ClaimCheck'\r\n\r\ninterface RoundsTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const hasHistoryLoaded = useGetHasHistoryLoaded()\r\n  const currentHistoryPage = useGetCurrentHistoryPage()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n\r\n  const handleClick = () => {\r\n    dispatch(fetchNodeHistory({ account, page: currentHistoryPage + 1 }))\r\n  }\r\n\r\n  return hasBetHistory ? (\r\n    <>\r\n      <V1ClaimCheck />\r\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\r\n        <HistoricalBet key={bet.round.epoch} bet={bet} />\r\n      ))}\r\n      {hasBetHistory && !hasHistoryLoaded && (\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"24px\">\r\n          <Button variant=\"secondary\" scale=\"sm\" onClick={handleClick} disabled={isFetchingHistory}>\r\n            {t('View More')}\r\n          </Button>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  ) : (\r\n    <>\r\n      <V1ClaimCheck />\r\n      <Box p=\"24px\">\r\n        <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n          {t('No prediction history available')}\r\n        </Heading>\r\n        <Text as=\"p\" textAlign=\"center\">\r\n          {t(\r\n            'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n          )}\r\n        </Text>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RoundsTab\r\n","// @ts-nocheck\r\n/**\r\n * There is ts-nocheck at the top of this file for the following reasons:\r\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\r\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\r\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\r\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\r\n * without also messing prettier.\r\n *\r\n * I'll leave TODO: comment here to check back later if there is update to types\r\n *\r\n */\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\ninterface SliceProps {\r\n  length: number\r\n  offset?: number\r\n}\r\n\r\nexport const DrawAnimation = keyframes`\r\n  from {\r\n    stroke-dasharray: 0, 339.292\r\n  }\r\n  to {\r\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\r\n  }\r\n`\r\n\r\nexport const OffsetAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0\r\n  }\r\n  to {\r\n    stroke-dashoffset: ${(props) => -props.offset};\r\n  }\r\n`\r\n\r\nexport const SVG = styled.svg`\r\n  width: 128px;\r\n  height: 128px;\r\n  transform: rotate(-90deg);\r\n`\r\n\r\nconst DefaultSlice = styled.circle<SliceProps>`\r\n  fill: none;\r\n  stroke-width: 16;\r\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\r\n`\r\n\r\nexport const LostSlice = styled(DefaultSlice)`\r\n  stroke: #ed4b9e;\r\n  animation: ${DrawAnimation} 1s ease;\r\n`\r\n\r\nexport const WonSlice = styled(DefaultSlice)`\r\n  stroke: #31d0aa;\r\n  stroke-dashoffset: ${(props) => -props.offset};\r\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  width: 128px;\r\n  height: 128px;\r\n`\r\n\r\nexport const Info = styled.div`\r\n  width: 128px;\r\n  height: 128px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 2;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\r\n\r\n/**\r\n * Bare minimum chart that doesn't require any external dependencies\r\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\r\n */\r\n\r\ninterface PnlChartProps {\r\n  won: number\r\n  lost: number\r\n}\r\n\r\n// 2 * Pi * R\r\nconst CIRCUMFERENCE = 339.292\r\n\r\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\r\n  const { t } = useTranslation()\r\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\r\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\r\n  const paintWon = CIRCUMFERENCE - paintLost\r\n  return (\r\n    <Wrapper>\r\n      <SVG viewBox=\"0 0 128 128\">\r\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\r\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\r\n      </SVG>\r\n      <Info>\r\n        <Text small lineHeight=\"1\">\r\n          {t('Won')}\r\n        </Text>\r\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\r\n          {won}/{won + lost}\r\n        </Text>\r\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\r\n          {percentageWon}%\r\n        </Text>\r\n      </Info>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PnlChart\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb } from '../helpers'\r\n\r\ntype SummaryType = 'won' | 'lost' | 'entered'\r\n\r\ninterface SummaryRowProps {\r\n  type: SummaryType\r\n  summary: any\r\n  bnbBusdPrice: BigNumber\r\n}\r\n\r\nconst summaryTypeColors = {\r\n  won: 'success',\r\n  lost: 'failure',\r\n  entered: 'text',\r\n}\r\n\r\nconst summaryTypeSigns = {\r\n  won: '+',\r\n  lost: '-',\r\n  entered: '',\r\n}\r\n\r\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const color = summaryTypeColors[type]\r\n  const { rounds, amount } = summary[type]\r\n  const totalRounds = summary.entered.rounds\r\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\r\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\r\n  const displayAmount = type === 'won' ? summary[type].payout : amount\r\n\r\n  return (\r\n    <>\r\n      <Text mt=\"16px\" bold color=\"textSubtle\">\r\n        {t(typeTranslationKey)}\r\n      </Text>\r\n      <Flex>\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {rounds} {t('Rounds').toLocaleLowerCase()}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"3\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SummaryRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useGetCurrentEpoch } from 'state/predictions/hooks'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\r\nimport PnlChart from './PnlChart'\r\nimport SummaryRow from './SummaryRow'\r\n\r\ninterface PnlTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\ninterface PnlCategory {\r\n  rounds: number\r\n  amount: number\r\n}\r\n\r\ninterface PnlSummary {\r\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\r\n  lost: PnlCategory\r\n  entered: PnlCategory\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 24px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst initialPnlSummary: PnlSummary = {\r\n  won: {\r\n    rounds: 0,\r\n    amount: 0,\r\n    payout: 0, // net payout after all deductions\r\n    bestRound: {\r\n      id: '0',\r\n      payout: 0, // net payout after all deductions\r\n      multiplier: 0,\r\n    },\r\n  },\r\n  lost: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n  entered: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n}\r\n\r\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\r\n  return bets.reduce((summary: PnlSummary, bet) => {\r\n    const roundResult = getRoundResult(bet, currentEpoch)\r\n    if (roundResult === Result.WIN) {\r\n      const payout = getNetPayout(bet, REWARD_RATE)\r\n      let { bestRound } = summary.won\r\n      if (payout > bestRound.payout) {\r\n        const { bullAmount, bearAmount, totalAmount } = bet.round\r\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n        bestRound = { id: bet.round.epoch.toString(), payout, multiplier }\r\n      }\r\n      return {\r\n        won: {\r\n          rounds: summary.won.rounds + 1,\r\n          amount: summary.won.amount + bet.amount,\r\n          payout: summary.won.payout + payout,\r\n          bestRound,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        lost: summary.lost,\r\n      }\r\n    }\r\n    if (roundResult === Result.LOSE) {\r\n      return {\r\n        lost: {\r\n          rounds: summary.lost.rounds + 1,\r\n          amount: summary.lost.amount + bet.amount,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        won: summary.won,\r\n      }\r\n    }\r\n    // Ignore Canceled and Live rounds\r\n    return summary\r\n  }, initialPnlSummary)\r\n}\r\n\r\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n\r\n  const summary = getPnlSummary(bets, currentEpoch)\r\n\r\n  const netResultAmount = summary.won.payout - summary.lost.amount\r\n  const netResultIsPositive = netResultAmount > 0\r\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\r\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\r\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\r\n\r\n  // Guard in case user has only lost rounds\r\n  const hasBestRound = summary.won.bestRound.payout !== 0\r\n\r\n  return hasBetHistory ? (\r\n    <Box p=\"16px\">\r\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\r\n        {t('Your history')}\r\n      </Text>\r\n      <Flex>\r\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\r\n          <Text bold color=\"textSubtle\">\r\n            {t('Net results')}\r\n          </Text>\r\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\r\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Box pl=\"8px\">\r\n        <Text mt=\"24px\" bold color=\"textSubtle\">\r\n          {t('Average return / round')}\r\n        </Text>\r\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\r\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\r\n        </Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\r\n        </Text>\r\n\r\n        {hasBestRound && (\r\n          <>\r\n            <Text mt=\"16px\" bold color=\"textSubtle\">\r\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\r\n            </Text>\r\n            <Flex alignItems=\"flex-end\">\r\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\r\n              <Text ml=\"4px\" small color=\"textSubtle\">\r\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\r\n              </Text>\r\n            </Flex>\r\n            <Text small color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\r\n            </Text>\r\n          </>\r\n        )}\r\n\r\n        <Text mt=\"16px\" bold color=\"textSubtle\">\r\n          {t('Average position entered / round')}\r\n        </Text>\r\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\r\n        </Text>\r\n\r\n        <Divider />\r\n\r\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n\r\n        <Flex justifyContent=\"center\" mt=\"24px\">\r\n          <Link href={`${getBscScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\r\n            <Button mt=\"8px\" width=\"100%\">\r\n              {t('View Reclaimed & Won')}\r\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\r\n            </Button>\r\n          </Link>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default PnlTab\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { fetchNodeHistory } from 'state/predictions'\r\nimport { getFilteredBets } from 'state/predictions/helpers'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetCurrentEpoch,\r\n  useGetCurrentHistoryPage,\r\n  useGetHistory,\r\n  useGetHistoryFilter,\r\n  useGetIsFetchingHistory,\r\n  useIsHistoryPaneOpen,\r\n} from 'state/predictions/hooks'\r\nimport { Header, HistoryTabs } from './components/History'\r\nimport RoundsTab from './components/History/RoundsTab'\r\nimport PnlTab from './components/History/PnlTab/PnlTab'\r\n\r\nconst StyledHistory = styled.div`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nconst BetWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst History = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const historyFilter = useGetHistoryFilter()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const currentHistoryPage = useGetCurrentHistoryPage()\r\n  const { t } = useTranslation()\r\n  const bets = useGetHistory()\r\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\r\n\r\n  useEffect(() => {\r\n    if (account && isHistoryPaneOpen) {\r\n      dispatch(fetchNodeHistory({ account }))\r\n    }\r\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\r\n\r\n  const results = getFilteredBets(bets, historyFilter)\r\n  const hasBetHistory = results && results.length > 0\r\n\r\n  let activeTabComponent = null\r\n\r\n  switch (activeTab) {\r\n    case HistoryTabs.PNL:\r\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n    case HistoryTabs.ROUNDS:\r\n    default:\r\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n  }\r\n\r\n  if (!account) {\r\n    activeTabComponent = (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\r\n        <ConnectWalletButton />\r\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledHistory>\r\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <BetWrapper>\r\n        {isFetchingHistory && currentHistoryPage === 1 ? (\r\n          <SpinnerWrapper>\r\n            <Spinner size={72} />\r\n          </SpinnerWrapper>\r\n        ) : (\r\n          activeTabComponent\r\n        )}\r\n      </BetWrapper>\r\n    </StyledHistory>\r\n  )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\ninterface MultiplierProps extends SvgProps {\r\n  isActive: boolean\r\n}\r\n\r\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1.03125\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { CheckmarkCircleIcon, CheckmarkCircleFillIcon, Tag, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnbv2 } from '../../helpers'\r\n\r\ninterface EnteredTagProps {\r\n  amount?: ethers.BigNumber\r\n  hasClaimed?: boolean\r\n}\r\n\r\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount, hasClaimed = false }) => {\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <span ref={targetRef}>\r\n        <Tag\r\n          variant=\"secondary\"\r\n          fontWeight=\"bold\"\r\n          textTransform=\"uppercase\"\r\n          outline={!hasClaimed}\r\n          startIcon={hasClaimed ? <CheckmarkCircleFillIcon width=\"18px\" /> : <CheckmarkCircleIcon width=\"18px\" />}\r\n        >\r\n          {hasClaimed ? t('Claimed') : t('Entered')}\r\n        </Tag>{' '}\r\n      </span>{' '}\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EnteredTag\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport styled, { CSSProperties } from 'styled-components'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition } from 'state/types'\r\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\r\nimport EnteredTag from './EnteredTag'\r\n\r\ninterface MultiplierArrowProps {\r\n  betAmount?: ethers.BigNumber\r\n  multiplier?: string\r\n  hasEntered?: boolean\r\n  hasClaimed?: boolean\r\n  betPosition?: BetPosition\r\n  isDisabled?: boolean\r\n  isActive?: boolean\r\n}\r\n\r\nconst ArrowWrapper = styled.div`\r\n  height: 65px;\r\n  margin: 0 auto;\r\n  width: 240px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst EnteredTagWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 10;\r\n`\r\n\r\nconst getTextColor =\r\n  (fallback = 'textSubtle') =>\r\n  (isActive: boolean, isDisabled: boolean) => {\r\n    if (isDisabled) {\r\n      return 'textDisabled'\r\n    }\r\n\r\n    if (isActive) {\r\n      return 'white'\r\n    }\r\n\r\n    return fallback\r\n  }\r\n\r\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\r\n  betAmount,\r\n  multiplier,\r\n  hasEntered = false,\r\n  hasClaimed = false,\r\n  betPosition = BetPosition.BULL,\r\n  isDisabled = false,\r\n  isActive = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const upColor = getTextColor('success')(isActive, isDisabled)\r\n  const downColor = getTextColor('failure')(isActive, isDisabled)\r\n  const textColor = getTextColor()(isActive, isDisabled)\r\n  const multiplierText = (\r\n    <Box>\r\n      <Flex justifyContent=\"center\" height=\"14px\">\r\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\r\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\r\n          {t('Payout')}\r\n        </Text>\r\n      </Flex>\r\n    </Box>\r\n  )\r\n\r\n  const getEnteredTag = (position: CSSProperties) => {\r\n    if (!hasEntered) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <EnteredTagWrapper style={position}>\r\n        <EnteredTag amount={betAmount} hasClaimed={hasClaimed} />\r\n      </EnteredTagWrapper>\r\n    )\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return (\r\n      <Box mt=\"-1px\" position=\"relative\">\r\n        <ArrowWrapper>\r\n          <RoundMultiplierDownArrow isActive={isActive} />\r\n          {getEnteredTag({ bottom: 0, right: 0 })}\r\n          <Content>\r\n            {!isDisabled && multiplierText}\r\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\r\n              {t('Down')}\r\n            </Text>\r\n          </Content>\r\n        </ArrowWrapper>\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Box mb=\"-1px\" position=\"relative\">\r\n      <ArrowWrapper>\r\n        <RoundMultiplierUpArrow isActive={isActive} />\r\n        {getEnteredTag({ top: 0, left: 0 })}\r\n        <Content>\r\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\r\n            {t('Up')}\r\n          </Text>\r\n          {!isDisabled && multiplierText}\r\n        </Content>\r\n      </ArrowWrapper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MultiplierArrow\r\n","import React, { ReactElement } from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\n\r\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\r\n\r\ninterface CardHeaderProps {\r\n  status: Status\r\n  title: string\r\n  epoch: number\r\n  icon?: ReactElement\r\n}\r\n\r\nconst HEADER_HEIGHT = '37px'\r\n\r\n// Used to get the gradient for the card border, which depends on the header color to create the illusion\r\n// that header is overlapping the 1px card border.\r\n// 'live' is not included into the switch case because it has isActive border style\r\nexport const getBorderBackground = (theme: DefaultTheme, status: Status) => {\r\n  const gradientStopPoint = `calc(${HEADER_HEIGHT} + 1px)`\r\n  switch (status) {\r\n    case 'calculating':\r\n      return `linear-gradient(transparent ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint}), ${theme.colors.gradients.cardHeader}`\r\n    case 'canceled':\r\n      return `linear-gradient(${theme.colors.warning} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\r\n    case 'next':\r\n      return `linear-gradient(${theme.colors.secondary} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\r\n  switch (status) {\r\n    case 'calculating':\r\n      return theme.colors.gradients.cardHeader\r\n    case 'live':\r\n      return 'transparent'\r\n    case 'canceled':\r\n      return theme.colors.warning\r\n    case 'next':\r\n      return theme.colors.secondary\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\r\ntype FallbackColor = 'text' | 'textSubtle'\r\n\r\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\r\n  switch (status) {\r\n    case 'expired':\r\n      return 'textDisabled'\r\n    case 'next':\r\n      return 'white'\r\n    case 'live':\r\n      return 'secondary'\r\n    case 'canceled':\r\n    case 'calculating':\r\n      return 'text'\r\n    default:\r\n      return fallback\r\n  }\r\n}\r\n\r\nconst StyledCardHeader = styled.div<{ status: Status }>`\r\n  align-items: center;\r\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  height: ${HEADER_HEIGHT};\r\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\r\n`\r\n\r\nconst Round = styled.div`\r\n  justify-self: center;\r\n`\r\n\r\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\r\n  const textColor = getTextColorByStatus(status, 'text')\r\n  const isLive = status === 'live'\r\n\r\n  return (\r\n    <StyledCardHeader status={status}>\r\n      <Flex alignItems=\"center\">\r\n        {icon}\r\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\r\n          {title}\r\n        </Text>\r\n      </Flex>\r\n      <Round>\r\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\r\n          {`#${epoch}`}\r\n        </Text>\r\n      </Round>\r\n    </StyledCardHeader>\r\n  )\r\n}\r\n\r\nexport default CardHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { useGetIsClaimable } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\n\r\ninterface CollectWinningsOverlayProps {\r\n  epoch: number\r\n  isBottom?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 30;\r\n\r\n  ${({ isBottom }) => {\r\n    return isBottom\r\n      ? `\r\n      border-radius: 0 0 16px 16px;\r\n      bottom: 0;\r\n    `\r\n      : `\r\n      top: 37px; // Card header height\r\n    `\r\n  }}\r\n`\r\n\r\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({ epoch, isBottom = false, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const isClaimable = useGetIsClaimable(epoch)\r\n\r\n  if (!isClaimable) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\r\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n      <CollectWinningsButton hasClaimed={false} width=\"100%\">\r\n        {t('Collect Winnings')}\r\n      </CollectWinningsButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsOverlay\r\n","import React from 'react'\r\nimport { Card, CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport useTheme from 'hooks/useTheme'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\n\r\ninterface CanceledRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\r\n  const { epoch } = round\r\n\r\n  const handleSuccess = async () => {\r\n    setIsRefundable(false)\r\n  }\r\n\r\n  return (\r\n    <Card borderBackground={getBorderBackground(theme, 'canceled')}>\r\n      <CardHeader\r\n        status=\"canceled\"\r\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Canceled')}\r\n        epoch={round.epoch}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Flex flexDirection=\"column\" alignItems=\"center\">\r\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\r\n              {t('Round Canceled')}\r\n            </Text>\r\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\r\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\r\n              {t('Learn More')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CanceledRoundCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\n\r\ninterface CalculatingCardProps {\r\n  round: NodeRound\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n}\r\n\r\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round, hasEnteredUp, hasEnteredDown }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Card borderBackground={getBorderBackground(theme, 'calculating')}>\r\n        <CardHeader\r\n          status=\"calculating\"\r\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n          title={t('Calculating')}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow isDisabled hasEntered={hasEnteredUp} />\r\n          <RoundResultBox>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n              <Spinner size={96} />\r\n              <Flex mt=\"8px\" ref={targetRef}>\r\n                <TooltipText>{t('Calculating')}</TooltipText>\r\n                <InfoIcon ml=\"4px\" />\r\n              </Flex>\r\n            </Flex>\r\n          </RoundResultBox>\r\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled hasEntered={hasEnteredDown} />\r\n        </CardBody>\r\n      </Card>\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CalculatingCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\r\nimport { useGetBufferSeconds } from 'state/predictions/hooks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { getHasRoundFailed } from '../../helpers'\r\nimport { RoundResult } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface ExpiredRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  hasClaimedUp: boolean\r\n  hasClaimedDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst StyledExpiredRoundCard = styled(Card)`\r\n  opacity: 0.7;\r\n  transition: opacity 300ms;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  hasClaimedUp,\r\n  hasClaimedDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { epoch, lockPrice, closePrice } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const bufferSeconds = useGetBufferSeconds()\r\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\r\n\r\n  if (hasRoundFailed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  if (!closePrice) {\r\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <StyledExpiredRoundCard borderBackground={getBorderBackground(theme, 'expired')}>\r\n        <CardHeader\r\n          status=\"expired\"\r\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\r\n          title={t('Expired')}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            isActive={betPosition === BetPosition.BULL}\r\n            hasEntered={hasEnteredUp}\r\n            hasClaimed={hasClaimedUp}\r\n          />\r\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            isActive={betPosition === BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            hasClaimed={hasClaimedDown}\r\n          />\r\n        </CardBody>\r\n      </StyledExpiredRoundCard>\r\n      <CollectWinningsOverlay epoch={epoch} isBottom={hasEnteredDown} />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ExpiredRoundCard\r\n","import React from 'react'\r\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\r\n\r\ninterface RoundProgressProps extends ProgressProps {\r\n  lockTimestamp: number\r\n  closeTimestamp: number\r\n}\r\n\r\nconst RoundProgress: React.FC<RoundProgressProps> = ({ lockTimestamp, closeTimestamp, ...props }) => {\r\n  const startMs = lockTimestamp * 1000\r\n  const endMs = closeTimestamp * 1000\r\n  const now = Date.now()\r\n  const rawProgress = ((now - startMs) / (endMs - startMs)) * 100\r\n  const progress = rawProgress <= 100 ? rawProgress : 100\r\n\r\n  return <Progress primaryStep={progress} {...props} />\r\n}\r\n\r\nexport default RoundProgress\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Flex,\r\n  PlayCircleOutlineIcon,\r\n  Skeleton,\r\n  Text,\r\n  TooltipText,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetLastOraclePrice, useGetBufferSeconds } from 'state/predictions/hooks'\r\nimport RoundProgress from 'components/RoundProgress'\r\nimport { formatUsdv2, getHasRoundFailed, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader from './CardHeader'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface LiveRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { lockPrice, totalAmount, lockTimestamp, closeTimestamp } = round\r\n  const price = useGetLastOraclePrice()\r\n  const bufferSeconds = useGetBufferSeconds()\r\n\r\n  const isBull = lockPrice && price.gt(lockPrice)\r\n  const priceColor = isBull ? 'success' : 'failure'\r\n\r\n  const priceDifference = getPriceDifference(price, lockPrice)\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\r\n\r\n  const now = Date.now()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  if (hasRoundFailed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  if (now > closeTimestamp * 1000) {\r\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\r\n  }\r\n\r\n  return (\r\n    <Card isActive>\r\n      <CardHeader\r\n        status=\"live\"\r\n        icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\r\n        title={t('Live')}\r\n        epoch={round.epoch}\r\n      />\r\n      <RoundProgress variant=\"flat\" scale=\"sm\" lockTimestamp={lockTimestamp} closeTimestamp={closeTimestamp} />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow\r\n          betAmount={betAmount}\r\n          multiplier={bullMultiplier}\r\n          hasEntered={hasEnteredUp}\r\n          isActive={isBull}\r\n        />\r\n        <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n            {t('Last Price')}\r\n          </Text>\r\n          <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\r\n            <div ref={targetRef}>\r\n              <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\r\n                {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\r\n              </TooltipText>\r\n            </div>\r\n            <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n              {formatUsdv2(priceDifference)}\r\n            </PositionTag>\r\n          </Flex>\r\n          {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n          <PrizePoolRow totalAmount={totalAmount} />\r\n        </RoundResultBox>\r\n        <MultiplierArrow\r\n          betAmount={betAmount}\r\n          multiplier={bearMultiplier}\r\n          betPosition={BetPosition.BEAR}\r\n          hasEntered={hasEnteredDown}\r\n          isActive={!isBull}\r\n        />\r\n      </CardBody>\r\n      {tooltipVisible && tooltip}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default LiveRoundCard\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardFlipProps {\r\n  isFlipped: boolean\r\n  height: string\r\n  children: [ReactNode, ReactNode]\r\n}\r\n\r\nconst Front = styled.div`\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  display: flex;\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: z-index 600ms;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst Back = styled(Front)`\r\n  transform: rotateY(180deg);\r\n`\r\n\r\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\r\n  height: 100%;\r\n  position: relative;\r\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\r\n  transform-style: preserve-3d;\r\n  transition: transform 600ms;\r\n\r\n  ${Front} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\r\n  }\r\n\r\n  ${Back} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\r\n  }\r\n`\r\n\r\nconst StyledCardFlip = styled.div`\r\n  perspective: 1000px;\r\n  z-index: auto;\r\n`\r\n\r\nconst getComponents = (children: CardFlipProps['children']) => {\r\n  if (children.length !== 2) {\r\n    throw new Error('CardFlip: Two children are required')\r\n  }\r\n\r\n  return children\r\n}\r\n\r\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\r\n  const [front, back] = getComponents(children)\r\n\r\n  return (\r\n    <StyledCardFlip style={{ height }}>\r\n      <Inner isFlipped={isFlipped}>\r\n        <Front>{front}</Front>\r\n        <Back>{back}</Back>\r\n      </Inner>\r\n    </StyledCardFlip>\r\n  )\r\n}\r\n\r\nexport default CardFlip\r\n","import { useContext } from 'react'\r\nimport { SwiperContext } from '../context/SwiperProvider'\r\n\r\nconst useSwiper = () => {\r\n  const swiperContext = useContext(SwiperContext)\r\n\r\n  if (swiperContext === undefined) {\r\n    throw new Error('Swiper not found')\r\n  }\r\n\r\n  return swiperContext\r\n}\r\n\r\nexport default useSwiper\r\n","import styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\n\r\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\r\n  flex: 1;\r\n`\r\n\r\nexport default FlexRow\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n  ArrowBackIcon,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Button,\r\n  BinanceIcon,\r\n  Text,\r\n  BalanceInput,\r\n  Slider,\r\n  Box,\r\n  AutoRenewIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetMinBetAmount } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { BetPosition } from 'state/types'\r\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport PositionTag from '../PositionTag'\r\nimport useSwiper from '../../hooks/useSwiper'\r\nimport FlexRow from '../FlexRow'\r\n\r\ninterface SetPositionCardProps {\r\n  position: BetPosition\r\n  togglePosition: () => void\r\n  epoch: number\r\n  onBack: () => void\r\n  onSuccess: (hash: string) => Promise<void>\r\n}\r\n\r\nconst dust = parseUnits('0.01', 18)\r\nconst percentShortcuts = [10, 25, 50, 75]\r\n\r\nconst getButtonProps = (\r\n  value: ethers.BigNumber,\r\n  bnbBalance: ethers.BigNumber,\r\n  minBetAmountBalance: ethers.BigNumber,\r\n) => {\r\n  const hasSufficientBalance = () => {\r\n    if (value.gt(0)) {\r\n      return value.lte(bnbBalance)\r\n    }\r\n    return bnbBalance.gt(0)\r\n  }\r\n\r\n  if (!hasSufficientBalance()) {\r\n    return { key: 'Insufficient BNB balance', disabled: true }\r\n  }\r\n\r\n  if (value.eq(0)) {\r\n    return { key: 'Enter an amount', disabled: true }\r\n  }\r\n\r\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\r\n}\r\n\r\nconst getValueAsEthersBn = (value: string) => {\r\n  const valueAsFloat = parseFloat(value)\r\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\r\n}\r\n\r\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, epoch, onBack, onSuccess }) => {\r\n  const [value, setValue] = useState('')\r\n  const [isTxPending, setIsTxPending] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [percent, setPercent] = useState(0)\r\n\r\n  const { account } = useWeb3React()\r\n  const { swiper } = useSwiper()\r\n  const { balance: bnbBalance } = useGetBnbBalance()\r\n  const minBetAmount = useGetMinBetAmount()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const predictionsContract = usePredictionsContract()\r\n\r\n  // Convert bnb balance to ethers.BigNumber\r\n  const bnbBalanceAsBn = useMemo(() => {\r\n    return ethers.BigNumber.from(bnbBalance.toString())\r\n  }, [bnbBalance])\r\n  const maxBalance = useMemo(() => {\r\n    return bnbBalanceAsBn.gt(dust) ? bnbBalanceAsBn.sub(dust) : dust\r\n  }, [bnbBalanceAsBn])\r\n  const balanceDisplay = formatBigNumber(bnbBalanceAsBn)\r\n\r\n  const valueAsBn = getValueAsEthersBn(value)\r\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\r\n\r\n  const handleInputChange = (input: string) => {\r\n    const inputAsBn = getValueAsEthersBn(input)\r\n\r\n    if (inputAsBn.eq(0)) {\r\n      setPercent(0)\r\n    } else {\r\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\r\n      const percentageAsFloat = percentage.toUnsafeFloat()\r\n\r\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\r\n    }\r\n    setValue(input)\r\n  }\r\n\r\n  const handlePercentChange = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\r\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\r\n      setValue(formatFixedNumber(balancePercentage))\r\n    } else {\r\n      setValue('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // Clear value\r\n  const handleGoBack = () => {\r\n    setValue('')\r\n    setPercent(0)\r\n    onBack()\r\n  }\r\n\r\n  // Disable the swiper events to avoid conflicts\r\n  const handleMouseOver = () => {\r\n    swiper.keyboard.disable()\r\n    swiper.mousewheel.disable()\r\n    swiper.detachEvents()\r\n  }\r\n\r\n  const handleMouseOut = () => {\r\n    swiper.keyboard.enable()\r\n    swiper.mousewheel.enable()\r\n    swiper.attachEvents()\r\n  }\r\n\r\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\r\n\r\n  const handleEnterPosition = async () => {\r\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\r\n\r\n    try {\r\n      const tx = await callWithGasPrice(predictionsContract, betMethod, [epoch], { value: valueAsBn.toString() })\r\n      setIsTxPending(true)\r\n      const receipt = await tx.wait()\r\n      onSuccess(receipt.transactionHash)\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsTxPending(false)\r\n    }\r\n  }\r\n\r\n  // Warnings\r\n  useEffect(() => {\r\n    const inputAmount = getValueAsEthersBn(value)\r\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\r\n\r\n    if (!hasSufficientBalance) {\r\n      setErrorMessage({ key: 'Insufficient SHIDO balance' })\r\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\r\n      setErrorMessage({\r\n        key: 'A minimum amount of %num% %token% is required',\r\n        data: { num: formatBigNumber(minBetAmount), token: 'SHIDO' },\r\n      })\r\n    } else {\r\n      setErrorMessage(null)\r\n    }\r\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\r\n\r\n  return (\r\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\">\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\r\n            <ArrowBackIcon width=\"24px\" />\r\n          </IconButton>\r\n          <FlexRow>\r\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\r\n          </FlexRow>\r\n          <PositionTag betPosition={position} onClick={togglePosition}>\r\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody py=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text textAlign=\"right\" color=\"textSubtle\">\r\n            {t('Commit')}:\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <BinanceIcon mr=\"4px  \" />\r\n            <Text bold textTransform=\"uppercase\">\r\n              BNB\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          onUserInput={handleInputChange}\r\n          isWarning={showFieldWarning}\r\n          inputProps={{ disabled: !account || isTxPending }}\r\n        />\r\n        {showFieldWarning && (\r\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\r\n            {t(errorMessage.key, errorMessage.data)}\r\n          </Text>\r\n        )}\r\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\r\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\r\n        </Text>\r\n        <Slider\r\n          name=\"balance\"\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handlePercentChange}\r\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\r\n          step={0.01}\r\n          disabled={!account || isTxPending}\r\n          mb=\"4px\"\r\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {percentShortcuts.map((percentShortcut) => {\r\n            const handleClick = () => {\r\n              handlePercentChange(percentShortcut)\r\n            }\r\n\r\n            return (\r\n              <Button\r\n                key={percentShortcut}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={handleClick}\r\n                disabled={!account || isTxPending}\r\n                style={{ flex: 1 }}\r\n              >\r\n                {`${percentShortcut}%`}\r\n              </Button>\r\n            )\r\n          })}\r\n          <Button\r\n            scale=\"xs\"\r\n            variant=\"tertiary\"\r\n            onClick={() => handlePercentChange(100)}\r\n            disabled={!account || isTxPending}\r\n          >\r\n            {t('Max')}\r\n          </Button>\r\n        </Flex>\r\n        <Box mb=\"8px\">\r\n          {account ? (\r\n            <Button\r\n              width=\"100%\"\r\n              disabled={!account || disabled}\r\n              onClick={handleEnterPosition}\r\n              isLoading={isTxPending}\r\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n            >\r\n              {t(key)}\r\n            </Button>\r\n          ) : (\r\n            <ConnectWalletButton width=\"100%\" />\r\n          )}\r\n        </Box>\r\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\r\n          {t('You won’t be able to remove or change your position once you enter it.')}\r\n        </Text>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SetPositionCard\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  PlayCircleOutlineIcon,\r\n  Button,\r\n  useTooltip,\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { fetchLedgerData } from 'state/predictions'\r\nimport { ROUND_BUFFER } from 'state/predictions/config'\r\nimport useToast from 'hooks/useToast'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport CardFlip from '../CardFlip'\r\nimport { formatBnbv2 } from '../../helpers'\r\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\nimport SetPositionCard from './SetPositionCard'\r\n\r\ninterface OpenRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\ninterface State {\r\n  isSettingPosition: boolean\r\n  position: BetPosition\r\n}\r\n\r\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const [state, setState] = useState<State>({\r\n    isSettingPosition: false,\r\n    position: BetPosition.BULL,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess } = useToast()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { isSettingPosition, position } = state\r\n  const isBufferPhase = Date.now() > (round.lockTimestamp + ROUND_BUFFER) * 1000\r\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\r\n    { placement: 'top' },\r\n  )\r\n\r\n  const getHasEnteredPosition = () => {\r\n    if (hasEnteredUp || hasEnteredDown) {\r\n      return false\r\n    }\r\n\r\n    if (round.lockPrice !== null) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const canEnterPosition = getHasEnteredPosition()\r\n\r\n  const handleBack = () =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: false,\r\n    }))\r\n\r\n  const handleSetPosition = (newPosition: BetPosition) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: true,\r\n      position: newPosition,\r\n    }))\r\n  }\r\n\r\n  const togglePosition = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\r\n    }))\r\n  }\r\n\r\n  const handleSuccess = async (hash: string) => {\r\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\r\n\r\n    handleBack()\r\n\r\n    toastSuccess(\r\n      t('Success!'),\r\n      <ToastDescriptionWithTx txHash={hash}>\r\n        {t('%position% position entered', {\r\n          position: positionDisplay,\r\n        })}\r\n      </ToastDescriptionWithTx>,\r\n    )\r\n  }\r\n\r\n  const getPositionEnteredIcon = () => {\r\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\r\n  }\r\n\r\n  return (\r\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\r\n      <Card borderBackground={getBorderBackground(theme, 'next')}>\r\n        <CardHeader\r\n          status=\"next\"\r\n          epoch={round.epoch}\r\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\r\n          title={t('Next')}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\r\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\r\n            {canEnterPosition ? (\r\n              <>\r\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\r\n                <Button\r\n                  variant=\"success\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\r\n                  mb=\"4px\"\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter UP')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter DOWN')}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div ref={targetRef}>\r\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\r\n                    {t('%position% Entered', { position: positionDisplay })}\r\n                  </Button>\r\n                </div>\r\n                <PrizePoolRow totalAmount={round.totalAmount} />\r\n                {tooltipVisible && tooltip}\r\n              </>\r\n            )}\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <SetPositionCard\r\n        onBack={handleBack}\r\n        onSuccess={handleSuccess}\r\n        position={position}\r\n        togglePosition={togglePosition}\r\n        epoch={round.epoch}\r\n      />\r\n    </CardFlip>\r\n  )\r\n}\r\n\r\nexport default OpenRoundCard\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\n\r\nconst getNow = () => Math.floor(Date.now() / 1000)\r\n\r\n/**\r\n * Consider this moving up to the global level\r\n */\r\nconst useCountdown = (timestamp: number) => {\r\n  const [secondsRemaining, setSecondsRemaining] = useState(() => {\r\n    return timestamp - getNow()\r\n  })\r\n  const [isPaused, setIsPaused] = useState(false)\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  const pause = useCallback(() => setIsPaused(true), [setIsPaused])\r\n  const unpause = useCallback(() => setIsPaused(false), [setIsPaused])\r\n\r\n  useEffect(() => {\r\n    let timer: ReturnType<typeof setTimeout>\r\n\r\n    if (!isPaused && secondsRemaining > 0) {\r\n      timer = setTimeout(() => {\r\n        setSecondsRemaining((prevSecondsRemaining) => prevSecondsRemaining - 1)\r\n      }, 1000)\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timer)\r\n    }\r\n  }, [secondsRemaining, isPaused, setSecondsRemaining])\r\n\r\n  useEffect(() => {\r\n    setSecondsRemaining(timestamp - getNow())\r\n  }, [timestamp, setSecondsRemaining])\r\n\r\n  // Pause the timer if the tab becomes inactive to avoid it becoming out of sync\r\n  useEffect(() => {\r\n    if (isWindowVisible) {\r\n      setSecondsRemaining(timestamp - getNow())\r\n      unpause()\r\n    } else {\r\n      pause()\r\n    }\r\n  }, [pause, unpause, timestamp, setSecondsRemaining, isWindowVisible])\r\n\r\n  return { secondsRemaining, pause, unpause }\r\n}\r\n\r\nexport default useCountdown\r\n","import React from 'react'\r\nimport { Card, CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useGetIntervalSeconds } from 'state/predictions/hooks'\r\nimport { ROUND_BUFFER } from 'state/predictions/config'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useCountdown from '../../hooks/useCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const intervalSeconds = useGetIntervalSeconds()\r\n  const { secondsRemaining } = useCountdown(round.startTimestamp + intervalSeconds + ROUND_BUFFER)\r\n  const countdown = formatRoundTime(secondsRemaining)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  return (\r\n    <Card borderBackground={getBorderBackground(theme, 'soon')}>\r\n      <CardHeader status=\"soon\" icon={<WaitIcon mr=\"4px\" width=\"21px\" />} title={t('Later')} epoch={round.epoch} />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/predictions/hooks'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { getMultiplierv2 } from '../../helpers'\r\nimport ExpiredRoundCard from './ExpiredRoundCard'\r\nimport LiveRoundCard from './LiveRoundCard'\r\nimport OpenRoundCard from './OpenRoundCard'\r\nimport SoonRoundCard from './SoonRoundCard'\r\n\r\ninterface RoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\r\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { account } = useWeb3React()\r\n  const ledger = useGetBetByEpoch(account, epoch)\r\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\r\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\r\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\r\n  const hasClaimedUp = hasEntered && ledger.claimed && ledger.position === BetPosition.BULL\r\n  const hasClaimedDown = hasEntered && ledger.claimed && ledger.position === BetPosition.BEAR\r\n\r\n  const bullMultiplier = getMultiplierv2(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplierv2(totalAmount, bearAmount)\r\n\r\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\r\n  const formattedBearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\r\n\r\n  // Next (open) round\r\n  if (epoch === currentEpoch && lockPrice === null) {\r\n    return (\r\n      <OpenRoundCard\r\n        round={round}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        betAmount={ledger?.amount}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedBearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Live round\r\n  if (closePrice === null && epoch === currentEpoch - 1) {\r\n    return (\r\n      <LiveRoundCard\r\n        betAmount={ledger?.amount}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        round={round}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedBearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Fake future rounds\r\n  if (epoch > currentEpoch) {\r\n    return <SoonRoundCard round={round} />\r\n  }\r\n\r\n  // Past rounds\r\n  return (\r\n    <ExpiredRoundCard\r\n      round={round}\r\n      hasEnteredDown={hasEnteredDown}\r\n      hasEnteredUp={hasEnteredUp}\r\n      hasClaimedDown={hasClaimedDown}\r\n      hasClaimedUp={hasClaimedUp}\r\n      betAmount={ledger?.amount}\r\n      bullMultiplier={formattedBullMultiplier}\r\n      bearMultiplier={formattedBearMultiplier}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RoundCard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport styled from 'styled-components'\r\nimport { EthUsdtPairTokenIcon, Box, Flex, PocketWatchIcon, Text } from '@pancakeswap/uikit'\r\nimport { ROUND_BUFFER } from 'state/predictions/config'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetCurrentRoundLockTimestamp, useGetLastOraclePrice } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatRoundTime } from '../helpers'\r\nimport useCountdown from '../hooks/useCountdown'\r\n\r\nconst Token = styled(Box)`\r\n  margin-top: -24px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 30;\r\n\r\n  & > svg {\r\n    height: 48px;\r\n    width: 48px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: -32px;\r\n\r\n    & > svg {\r\n      height: 64px;\r\n      width: 64px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled(Text)`\r\n  font-size: 16px;\r\n  line-height: 21px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n  }\r\n`\r\n\r\nconst Price = styled(Text)`\r\n  height: 18px;\r\n  justify-self: start;\r\n  width: 70px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst Interval = styled(Text)`\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n    width: 32px;\r\n  }\r\n`\r\n\r\nconst Label = styled(Flex)<{ dir: 'left' | 'right' }>`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  box-shadow: ${({ theme }) => theme.shadows.level1};\r\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\r\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\r\n  flex-direction: column;\r\n  overflow: initial;\r\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    border-radius: ${({ theme }) => theme.radii.card};\r\n    flex-direction: row;\r\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\r\n  }\r\n`\r\n\r\nexport const PricePairLabel: React.FC = () => {\r\n  const price = useGetLastOraclePrice()\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  return (\r\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\r\n      <Token left={0}>\r\n        <EthUsdtPairTokenIcon />\r\n      </Token>\r\n      <Label dir=\"left\">\r\n        <Title bold textTransform=\"uppercase\">\r\n          BNBUSDC\r\n        </Title>\r\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\r\n      </Label>\r\n    </Box>\r\n  )\r\n}\r\n\r\ninterface TimerLabelProps {\r\n  interval: string\r\n  unit: 'm' | 'h' | 'd'\r\n}\r\n\r\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\r\n  const currentRoundLockTimestamp = useGetCurrentRoundLockTimestamp()\r\n  const { secondsRemaining } = useCountdown(currentRoundLockTimestamp + ROUND_BUFFER)\r\n  const countdown = formatRoundTime(secondsRemaining)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box pr=\"24px\" position=\"relative\">\r\n      <Label dir=\"right\">\r\n        <Title bold color=\"secondary\">\r\n          {secondsRemaining === 0 ? t('Closing') : countdown}\r\n        </Title>\r\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\r\n      </Label>\r\n      <Token right={0}>\r\n        <PocketWatchIcon />\r\n      </Token>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Flex, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst StyledPrevNextNav = styled(Flex)`\r\n  align-items: center;\r\n  display: none;\r\n  justify-content: space-between;\r\n  overflow: initial;\r\n  position: relative;\r\n  width: 128px;\r\n\r\n  box-shadow: ${({ theme }) => theme.shadows.level1};\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  background-color: ${({ theme }) => theme.card.background};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  left: 50%;\r\n  margin-left: -32px;\r\n  position: absolute;\r\n`\r\n\r\nconst PrevNextNav = () => {\r\n  const { swiper } = useSwiper()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n\r\n  const handlePrevSlide = () => {\r\n    swiper.slidePrev()\r\n  }\r\n\r\n  const handleNextSlide = () => {\r\n    swiper.slideNext()\r\n  }\r\n\r\n  const handleSlideToLive = () => {\r\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n    swiper.slideTo(currentEpochIndex - 1)\r\n    swiper.update()\r\n  }\r\n\r\n  return (\r\n    <StyledPrevNextNav>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\r\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n      <Icon onClick={handleSlideToLive}>\r\n        <BunnyCardsIcon width=\"64px\" />\r\n      </Icon>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\r\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n    </StyledPrevNextNav>\r\n  )\r\n}\r\n\r\nexport default PrevNextNav\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport { useGetIsFetchingHistory } from 'state/predictions/hooks'\r\n\r\nconst HistoryButton = () => {\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <IconButton variant=\"subtle\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\r\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default HistoryButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { Flex, HelpIcon, Button, PrizeIcon } from '@pancakeswap/uikit'\r\nimport FlexRow from './FlexRow'\r\nimport { PricePairLabel, TimerLabel } from './Label'\r\nimport PrevNextNav from './PrevNextNav'\r\nimport HistoryButton from './HistoryButton'\r\n\r\nconst SetCol = styled.div`\r\n  flex: none;\r\n  width: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    width: 270px;\r\n  }\r\n`\r\n\r\nconst HelpButtonWrapper = styled.div`\r\n  order: 1;\r\n  margin: 0 8px 0 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 2;\r\n    margin: 0 0 0 8px;\r\n  }\r\n`\r\n\r\nconst TimerLabelWrapper = styled.div`\r\n  order: 2;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n  }\r\n`\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: block;\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <FlexRow alignItems=\"center\" p=\"16px\">\r\n      <SetCol>\r\n        <PricePairLabel />\r\n      </SetCol>\r\n      <FlexRow justifyContent=\"center\">\r\n        <PrevNextNav />\r\n      </FlexRow>\r\n      <SetCol>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <TimerLabelWrapper>\r\n            <TimerLabel interval=\"5\" unit=\"m\" />\r\n          </TimerLabelWrapper>\r\n          <HelpButtonWrapper>\r\n            <Button\r\n              variant=\"subtle\"\r\n              as=\"a\"\r\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer noopener\"\r\n              width=\"48px\"\r\n            >\r\n              <HelpIcon width=\"24px\" color=\"white\" />\r\n            </Button>\r\n          </HelpButtonWrapper>\r\n          <ButtonWrapper style={{ order: 3 }}>\r\n            <Button as={Link} variant=\"subtle\" to=\"/prediction/leaderboard\" width=\"48px\">\r\n              <PrizeIcon color=\"white\" />\r\n            </Button>\r\n          </ButtonWrapper>\r\n          <ButtonWrapper style={{ order: 4 }}>\r\n            <HistoryButton />\r\n          </ButtonWrapper>\r\n        </Flex>\r\n      </SetCol>\r\n    </FlexRow>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\r\nimport useSwiper from './useSwiper'\r\n\r\n/**\r\n * Hooks for actions to be performed when the round changes\r\n */\r\nconst useOnNextRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  const { account } = useWeb3React()\r\n  const previousEpoch = usePreviousValue(currentEpoch)\r\n  const { swiper } = useSwiper()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\r\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n      // Slide to the current LIVE round which is always the one before the current round\r\n      swiper.slideTo(currentEpochIndex - 1)\r\n      swiper.update()\r\n    }\r\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\r\n}\r\n\r\nexport default useOnNextRound\r\n","import { useEffect } from 'react'\r\nimport usePrevious from 'hooks/usePreviousValue'\r\nimport useSwiper from './useSwiper'\r\nimport { PageView } from '../types'\r\n\r\n/**\r\n * Hooks for actions to be performed when the view changes (mobile)\r\n */\r\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\r\n  const { swiper } = useSwiper()\r\n  const prevView = usePrevious(view)\r\n\r\n  useEffect(() => {\r\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\r\n      swiper.slideTo(liveSwiperIndex, 0.1)\r\n    }\r\n  }, [swiper, prevView, view, liveSwiperIndex])\r\n}\r\n\r\nexport default useOnViewChange\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\r\nimport 'swiper/swiper.min.css'\r\nimport RoundCard from './components/RoundCard'\r\nimport Menu from './components/Menu'\r\nimport useSwiper from './hooks/useSwiper'\r\nimport useOnNextRound from './hooks/useOnNextRound'\r\nimport useOnViewChange from './hooks/useOnViewChange'\r\nimport { PageView } from './types'\r\n\r\nSwiperCore.use([Keyboard, Mousewheel])\r\n\r\nconst StyledSwiper = styled.div`\r\n  .swiper-wrapper {\r\n    align-items: center;\r\n    display: flex;\r\n  }\r\n\r\n  .swiper-slide {\r\n    width: 320px;\r\n  }\r\n`\r\nconst Positions: React.FC<{ view?: PageView }> = ({ view }) => {\r\n  const { setSwiper } = useSwiper()\r\n  const rounds = useGetSortedRounds()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const previousEpoch = currentEpoch > 0 ? currentEpoch - 1 : currentEpoch\r\n  const previousRound = rounds.find((round) => round.epoch === previousEpoch)\r\n  const swiperIndex = rounds.indexOf(previousRound)\r\n\r\n  useOnNextRound()\r\n  useOnViewChange(swiperIndex, view)\r\n\r\n  return (\r\n    <Box overflow=\"hidden\">\r\n      <Menu />\r\n      <StyledSwiper>\r\n        <Swiper\r\n          initialSlide={swiperIndex}\r\n          onSwiper={setSwiper}\r\n          spaceBetween={16}\r\n          slidesPerView=\"auto\"\r\n          freeMode\r\n          freeModeSticky\r\n          centeredSlides\r\n          freeModeMomentumRatio={0.25}\r\n          freeModeMomentumVelocityRatio={0.5}\r\n          mousewheel\r\n          keyboard\r\n          resizeObserver\r\n        >\r\n          {rounds.map((round) => (\r\n            <SwiperSlide key={round.epoch}>\r\n              <RoundCard round={round} />\r\n            </SwiperSlide>\r\n          ))}\r\n        </Swiper>\r\n      </StyledSwiper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Positions\r\n","export enum PageView {\r\n  POSITIONS = 'positions',\r\n  HISTORY = 'history',\r\n  CHART = 'chart',\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport Split from 'split-grid'\r\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\r\nimport debounce from 'lodash/debounce'\r\nimport delay from 'lodash/delay'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { setChartPaneState } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TradingView from './components/TradingView'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\n\r\n// The value to set the chart when the user clicks the chart tab at the bottom\r\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\r\n\r\nconst ExpandChartButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  bottom: 12px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: none;\r\n  left: 32px;\r\n  position: absolute;\r\n  z-index: 50;\r\n\r\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\r\n    background-color: ${({ theme }) => theme.card.background};\r\n    opacity: 1;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: inline-flex;\r\n  }\r\n`\r\n\r\nconst SplitWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr 12px 0;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ChartPane = styled.div`\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\r\n  flex: none;\r\n  overflow: hidden;\r\n  transition: width 200ms ease-in-out;\r\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\r\n`\r\n\r\nconst StyledDesktop = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst PositionPane = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  max-width: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n\r\n  & > div {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n`\r\n\r\nconst Gutter = styled.div`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  cursor: row-resize;\r\n  height: 12px;\r\n  position: relative;\r\n\r\n  &:before {\r\n    background-color: ${({ theme }) => theme.colors.textSubtle};\r\n    border-radius: 8px;\r\n    content: '';\r\n    height: 4px;\r\n    left: 50%;\r\n    margin-left: -32px;\r\n    position: absolute;\r\n    top: 4px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst Desktop: React.FC = () => {\r\n  const splitWrapperRef = useRef<HTMLDivElement>()\r\n  const chartRef = useRef<HTMLDivElement>()\r\n  const gutterRef = useRef<HTMLDivElement>()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleChartPane = () => {\r\n    const newChartPaneState = !isChartPaneOpen\r\n\r\n    if (newChartPaneState) {\r\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\r\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\r\n\r\n      // Purely comedic: We only want to animate if we are clicking the open chart button\r\n      // If we keep the transition on the resizing becomes very choppy\r\n      delay(() => {\r\n        splitWrapperRef.current.style.transition = ''\r\n      }, 150)\r\n    }\r\n\r\n    dispatch(setChartPaneState(newChartPaneState))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const threshold = 100\r\n    const handleDrag = debounce(() => {\r\n      const { height } = chartRef.current.getBoundingClientRect()\r\n\r\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\r\n      dispatch(setChartPaneState(height > threshold))\r\n    }, 50)\r\n\r\n    const split = Split({\r\n      dragInterval: 1,\r\n      snapOffset: threshold,\r\n      onDrag: handleDrag,\r\n      rowGutters: [\r\n        {\r\n          track: 1,\r\n          element: gutterRef.current,\r\n        },\r\n      ],\r\n    })\r\n\r\n    return () => {\r\n      split.destroy()\r\n    }\r\n  }, [gutterRef, chartRef, dispatch])\r\n\r\n  return (\r\n    <>\r\n      {!isChartPaneOpen && (\r\n        <ExpandChartButton\r\n          variant=\"tertiary\"\r\n          scale=\"sm\"\r\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\r\n          onClick={toggleChartPane}\r\n        >\r\n          {isChartPaneOpen ? t('Close') : t('Charts')}\r\n        </ExpandChartButton>\r\n      )}\r\n      <StyledDesktop>\r\n        <SplitWrapper ref={splitWrapperRef}>\r\n          <PositionPane>\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions />}\r\n          </PositionPane>\r\n          <Gutter ref={gutterRef} />\r\n          <ChartPane ref={chartRef}>\r\n            <TradingView />\r\n          </ChartPane>\r\n        </SplitWrapper>\r\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\r\n          <History />\r\n        </HistoryPane>\r\n      </StyledDesktop>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Desktop\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Cards,\r\n  ChartIcon,\r\n  HistoryIcon,\r\n  IconButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst ButtonNav = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst TabNav = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledMobileMenu = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex: none;\r\n  height: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\r\n  if (isHistoryOpen) {\r\n    return 2\r\n  }\r\n\r\n  if (isChartOpen) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst MobileMenu = () => {\r\n  const { swiper } = useSwiper()\r\n  const isHistoryOpen = useIsHistoryPaneOpen()\r\n  const isChartOpen = useIsChartPaneOpen()\r\n  const status = useGetPredictionsStatus()\r\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleItemClick = (index: number) => {\r\n    switch (index) {\r\n      case 2:\r\n        dispatch(setHistoryPaneState(true))\r\n        break\r\n      case 1:\r\n        dispatch(setChartPaneState(true))\r\n        dispatch(setHistoryPaneState(false))\r\n        break\r\n      case 0:\r\n      default:\r\n        dispatch(setHistoryPaneState(false))\r\n        dispatch(setChartPaneState(false))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledMobileMenu>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n      <TabNav>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\r\n          <ButtonMenuItem>\r\n            <Cards color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem>\r\n            <ChartIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem disabled={!account}>\r\n            <HistoryIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </TabNav>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n    </StyledMobileMenu>\r\n  )\r\n}\r\n\r\nexport default MobileMenu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport Menu from './components/Menu'\r\nimport TradingView from './components/TradingView'\r\n\r\nconst MenuWrapper = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst ChartWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n`\r\n\r\nconst Chart = () => {\r\n  return (\r\n    <Flex flexDirection=\"column\" height=\"100%\">\r\n      <MenuWrapper>\r\n        <Menu />\r\n      </MenuWrapper>\r\n      <ChartWrapper>\r\n        <TradingView />\r\n      </ChartWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex } from '@pancakeswap/uikit'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { PredictionStatus } from 'state/types'\r\nimport MobileMenu from './components/MobileMenu'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\nimport Chart from './Chart'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport { PageView } from './types'\r\n\r\nconst StyledMobile = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-height: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst View = styled.div<{ isVisible: boolean }>`\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n`\r\n\r\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\r\n  if (isHistoryPaneOpen) {\r\n    return PageView.HISTORY\r\n  }\r\n\r\n  if (isChartPaneOpen) {\r\n    return PageView.CHART\r\n  }\r\n\r\n  return PageView.POSITIONS\r\n}\r\n\r\nconst Mobile: React.FC = () => {\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\r\n  const status = useGetPredictionsStatus()\r\n\r\n  return (\r\n    <StyledMobile>\r\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\r\n        <View isVisible={view === PageView.POSITIONS}>\r\n          <Flex alignItems=\"center\" height=\"100%\">\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions view={view} />}\r\n          </Flex>\r\n        </View>\r\n        <View isVisible={view === PageView.CHART}>\r\n          <Chart />\r\n        </View>\r\n        <View isVisible={view === PageView.HISTORY}>\r\n          <History />\r\n        </View>\r\n      </Box>\r\n      <MobileMenu />\r\n    </StyledMobile>\r\n  )\r\n}\r\n\r\nexport default Mobile\r\n","import React, { useState } from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  InjectedModalProps,\r\n  Checkbox,\r\n  ModalHeader,\r\n  ModalTitle,\r\n  Heading,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\ninterface RiskDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst GradientModalHeader = styled(ModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n`\r\n\r\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\r\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const handleSetAcknowledgeRisk = () => {\r\n    setAcknowledgeRisk(!acknowledgeRisk)\r\n  }\r\n\r\n  const handleSetAcknowledgeBeta = () => {\r\n    setAcknowledgeBeta(!acknowledgeBeta)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <GradientModalHeader>\r\n        <ModalTitle>\r\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\r\n        </ModalTitle>\r\n      </GradientModalHeader>\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\r\n          <Heading as=\"h3\" mb=\"24px\">\r\n            {t('This Product is in beta.')}\r\n          </Heading>\r\n\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\r\n          </Text>\r\n\r\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t(\r\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\r\n                )}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n        </Box>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\r\n          {t('Continue')}\r\n        </Button>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default RiskDisclaimer\r\n","import React from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  InjectedModalProps,\r\n  LinkExternal,\r\n  Flex,\r\n  Image,\r\n  Heading,\r\n  Checkbox,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport const CHART_LOCAL_STORAGE_KEY = 'pcs_chart_do_not_show'\r\n\r\nconst Ul = styled.ul`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  list-style-position: outside;\r\n  margin-left: 16px;\r\n\r\n  & > li {\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n  }\r\n`\r\n\r\nconst ChartDisclaimer: React.FC<InjectedModalProps> = ({ onDismiss }) => {\r\n  const [doNotShow, setDoNowShow] = usePersistState(false, { localStorageKey: CHART_LOCAL_STORAGE_KEY })\r\n  const { t } = useTranslation()\r\n\r\n  const handleConfirm = () => {\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer minWidth=\"320px\">\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Flex justifyContent=\"center\" mb=\"32px\">\r\n          <Image src=\"/images/chartwarning.svg\" width={190} height={118} />\r\n        </Flex>\r\n        <Heading as=\"h3\" size=\"sm\">\r\n          {t('Warning')}:\r\n        </Heading>\r\n        <Heading as=\"h4\" size=\"sm\" mb=\"24px\">\r\n          {t('Prices shown on cards and charts are different')}:\r\n        </Heading>\r\n        <Text as=\"p\" fontSize=\"14px\" color=\"textSubtle\">\r\n          {t('The price you see come from difference places')}:\r\n        </Text>\r\n        <Ul>\r\n          <li>{t('Prices on cards come from Chainlink’s verifiable price oracle.')}</li>\r\n          <li>{t(\"Prices on charts come from Binance.com. Chart's are provided for your reference only.\")}</li>\r\n        </Ul>\r\n        <Text as=\"p\" mb=\"16px\" fontSize=\"14px\" color=\"textSubtle\">\r\n          {t(\"Only the price from Chainlink (shown on the cards) determines the round's result.\")}\r\n        </Text>\r\n        <LinkExternal\r\n          href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\r\n          external\r\n          mb=\"24px\"\r\n        >\r\n          {t('Learn More')}\r\n        </LinkExternal>\r\n        <Box>\r\n          <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\r\n            {t('I understand')}\r\n          </Button>\r\n        </Box>\r\n        <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n          <Flex alignItems=\"center\">\r\n            <div style={{ flex: 'none' }}>\r\n              <Checkbox id=\"checkbox\" scale=\"sm\" checked={doNotShow} onChange={() => setDoNowShow(!doNotShow)} />\r\n            </div>\r\n            <Text ml=\"8px\">{t(\"Don't show this again\")}</Text>\r\n          </Flex>\r\n        </label>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default ChartDisclaimer\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/predictions/hooks'\r\nimport { useInitialBlock } from 'state/block/hooks'\r\nimport { initializePredictions } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\r\nimport usePollPredictions from './hooks/usePollPredictions'\r\nimport Container from './components/Container'\r\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\r\nimport SwiperProvider from './context/SwiperProvider'\r\nimport Desktop from './Desktop'\r\nimport Mobile from './Mobile'\r\nimport RiskDisclaimer from './components/RiskDisclaimer'\r\nimport ChartDisclaimer, { CHART_LOCAL_STORAGE_KEY } from './components/ChartDisclaimer'\r\n\r\nconst Predictions = () => {\r\n  const { isDesktop } = useMatchBreakpoints()\r\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_accepted_risk-2',\r\n  })\r\n  const { account } = useWeb3React()\r\n  const status = useGetPredictionsStatus()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const initialBlock = useInitialBlock()\r\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\r\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\r\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer />, false)\r\n\r\n  // TODO: memoize modal's handlers\r\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\r\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\r\n\r\n  // Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedRisk) {\r\n      onPresentRiskDisclaimerRef.current()\r\n    }\r\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\r\n\r\n  // Chart Disclaimer\r\n  useEffect(() => {\r\n    if (isChartPaneOpen) {\r\n      const showChartDisclaimer = JSON.parse(localStorage.getItem(CHART_LOCAL_STORAGE_KEY))\r\n\r\n      if (showChartDisclaimer !== true) {\r\n        onPresentChartDisclaimerRef.current()\r\n      }\r\n    }\r\n  }, [onPresentChartDisclaimerRef, isChartPaneOpen])\r\n\r\n  useEffect(() => {\r\n    if (initialBlock > 0) {\r\n      // Do not start initialization until the first block has been retrieved\r\n      dispatch(initializePredictions(account))\r\n    }\r\n  }, [initialBlock, dispatch, account])\r\n\r\n  usePollPredictions()\r\n  usePollOraclePrice()\r\n\r\n  if (status === PredictionStatus.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\r\n      </Helmet>\r\n      <SwiperProvider>\r\n        <Container>\r\n          {isDesktop ? <Desktop /> : <Mobile />}\r\n          <CollectWinningsPopup />\r\n        </Container>\r\n      </SwiperProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Predictions\r\n","import { useEffect, useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ethers } from 'ethers'\r\nimport { minBy, orderBy } from 'lodash'\r\nimport { isAddress } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\r\nimport { parseBigNumberObj } from './helpers'\r\nimport { fetchAddressResult } from '.'\r\n\r\nexport const useGetRounds = () => {\r\n  const rounds = useSelector((state: State) => state.predictions.rounds)\r\n  return Object.keys(rounds).reduce((accum, epoch) => {\r\n    return {\r\n      ...accum,\r\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\r\n    }\r\n  }, {}) as { [key: string]: NodeRound }\r\n}\r\n\r\nexport const useGetRound = (epoch: number) => {\r\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\r\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\r\n  const bets = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][epoch]) {\r\n    return null\r\n  }\r\n\r\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\r\n}\r\n\r\nexport const useGetIsClaimable = (epoch) => {\r\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\r\n  return claimableStatuses[epoch] || false\r\n}\r\n\r\n/**\r\n * Used to get the range of rounds to poll for\r\n */\r\nexport const useGetEarliestEpoch = () => {\r\n  return useSelector((state: State) => {\r\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\r\n    return earliestRound?.epoch\r\n  })\r\n}\r\n\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalSeconds = () => {\r\n  return useSelector((state: State) => state.predictions.intervalSeconds)\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetRounds()\r\n  return rounds[currentEpoch]\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetHasHistoryLoaded = () => {\r\n  return useSelector((state: State) => state.predictions.hasHistoryLoaded)\r\n}\r\n\r\nexport const useGetCurrentHistoryPage = () => {\r\n  return useSelector((state: State) => state.predictions.currentHistoryPage)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetBufferSeconds = () => {\r\n  return useSelector((state: State) => state.predictions.bufferSeconds)\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetLastOraclePrice = () => {\r\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\r\n  return useMemo(() => {\r\n    return ethers.BigNumber.from(lastOraclePrice)\r\n  }, [lastOraclePrice])\r\n}\r\n\r\n/**\r\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\r\n */\r\nexport const useGetCurrentRoundLockTimestamp = () => {\r\n  const currentRound = useGetCurrentRound()\r\n  const intervalSeconds = useGetIntervalSeconds()\r\n\r\n  if (!currentRound.lockTimestamp) {\r\n    return currentRound.startTimestamp + intervalSeconds\r\n  }\r\n\r\n  return currentRound.lockTimestamp\r\n}\r\n\r\n// Leaderboard\r\nexport const useGetLeaderboardLoadingState = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.loadingState)\r\n}\r\n\r\nexport const useGetLeaderboardResults = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.results)\r\n}\r\n\r\nexport const useGetLeaderboardFilters = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.filters)\r\n}\r\n\r\nexport const useGetLeaderboardSkip = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.skip)\r\n}\r\n\r\nexport const useGetLeaderboardHasMoreResults = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.hasMoreResults)\r\n}\r\n\r\nexport const useGetAddressResult = (account: string) => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.addressResults[account])\r\n}\r\n\r\nexport const useGetOrFetchLeaderboardAddressResult = (account: string) => {\r\n  const addressResult = useGetAddressResult(account)\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    const address = isAddress(account)\r\n\r\n    // If address result is null it means we already tried fetching the results and none came back\r\n    if (!addressResult && addressResult !== null && address) {\r\n      dispatch(fetchAddressResult(account))\r\n    }\r\n  }, [dispatch, account, addressResult])\r\n\r\n  return addressResult\r\n}\r\n"],"sourceRoot":""}